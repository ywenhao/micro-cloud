/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/UpsertAnnouncementUser": {
    put: operations["AnnouncementSrv_UpsertAnnouncementUser"];
  };
  "/v1/alarm": {
    get: operations["AlarmService_GetAlarm"];
  };
  "/v1/announcement": {
    get: operations["AnnouncementSrv_QueryAnnouncement"];
  };
  "/v1/announcement/alert": {
    get: operations["AnnouncementSrv_QueryAnnouncementAlert"];
  };
  "/v1/announcement/info": {
    get: operations["AnnouncementSrv_GetAnnouncementInfo"];
  };
  "/v1/apikey": {
    get: operations["Apikey_GetApikey"];
    put: operations["Apikey_UpdateApikey"];
    post: operations["Apikey_CreateApikey"];
    delete: operations["Apikey_DeleteApikey"];
  };
  "/v1/apikeys": {
    get: operations["Apikey_ListApikey"];
  };
  "/v1/behavioral_captcha": {
    get: operations["CaptchaService_GetCaptcha"];
  };
  "/v1/behavioral_captcha/verify": {
    post: operations["CaptchaService_CheckCaptcha"];
  };
  "/v1/buckets": {
    post: operations["Bucket_Create"];
    delete: operations["Bucket_DeleteBucket"];
  };
  "/v1/buckets/acl": {
    put: operations["Bucket_PutAcl"];
  };
  "/v1/buckets/base": {
    get: operations["Bucket_GetBucketBaseInfo"];
  };
  "/v1/buckets/cors": {
    get: operations["Bucket_GetCors"];
    put: operations["Bucket_PutCors"];
    delete: operations["Bucket_ClearCors"];
  };
  "/v1/buckets/info": {
    get: operations["Bucket_GetInfo"];
  };
  "/v1/buckets/lifecycle": {
    get: operations["Bucket_GetLifecycle"];
    put: operations["Bucket_PutLifecycle"];
  };
  "/v1/buckets/list": {
    get: operations["Bucket_List"];
  };
  "/v1/buckets/max_age": {
    put: operations["Bucket_PutMaxAge"];
  };
  "/v1/buckets/notification": {
    get: operations["Bucket_GetNotification"];
    put: operations["Bucket_ModifyNotification"];
    post: operations["Bucket_AddNotification"];
    delete: operations["Bucket_DelNotification"];
  };
  "/v1/buckets/referer": {
    get: operations["Bucket_GetReferer"];
    put: operations["Bucket_PutReferer"];
  };
  "/v1/buckets/remark": {
    put: operations["Bucket_PutRemark"];
  };
  "/v1/buckets/tag": {
    get: operations["Bucket_GetTag"];
    put: operations["Bucket_ModifyTag"];
    post: operations["Bucket_AddTag"];
    delete: operations["Bucket_DelTag"];
  };
  "/v1/captcha": {
    post: operations["Captcha_CreateCaptcha"];
  };
  "/v1/captcha/verify": {
    post: operations["Captcha_VerifyCaptcha"];
  };
  "/v1/cdn/ports": {
    get: operations["PortService_QueryPortByUser"];
  };
  "/v1/cdn/site": {
    get: operations["SiteServer_ListSite"];
    post: operations["SiteServer_CreatSite"];
  };
  "/v1/cdn/site/anti-theft-chain/{site_id}": {
    get: operations["SiteServer_GetSiteAntiStealingLink"];
    put: operations["SiteServer_UpdateSiteAntiTheftChain"];
  };
  "/v1/cdn/site/cache-config/{site_id}": {
    get: operations["SiteServer_GetSiteCacheConfig"];
    put: operations["SiteServer_UpdateSiteCacheConfig"];
  };
  "/v1/cdn/site/clear-cache/{site_id}": {
    post: operations["SiteServer_ClearSiteCache"];
  };
  "/v1/cdn/site/error-page/{site_id}": {
    get: operations["SiteServer_GetSiteErrorPage"];
    put: operations["SiteServer_UpdateSiteErrorPage"];
  };
  "/v1/cdn/site/manage-rule/{site_id}/{rule_type}": {
    get: operations["SiteServer_ListSiteManagedRule"];
    put: operations["SiteServer_UpdateSiteManagedRule"];
  };
  "/v1/cdn/site/network-config/{site_id}": {
    get: operations["SiteServer_GetSiteNetworkConfig"];
    put: operations["SiteServer_UpdateSiteNetworkConfig"];
  };
  "/v1/cdn/site/origin-config/{site_id}": {
    get: operations["SiteServer_GetSiteOrigin"];
    put: operations["SiteServer_UpdateOrigin"];
  };
  "/v1/cdn/site/overview": {
    get: operations["SiteServer_OverviewSite"];
  };
  "/v1/cdn/site/page-rule/{site_id}": {
    get: operations["SiteServer_ListSitePageRule"];
    post: operations["SiteServer_CreateSitePageRule"];
  };
  "/v1/cdn/site/page-rule/{site_id}/{rule_id}": {
    get: operations["SiteServer_GetSitePageRule"];
    put: operations["SiteServer_UpdateSitePageRule"];
    delete: operations["SiteServer_DeleteSitePageRule"];
  };
  "/v1/cdn/site/resolve/status": {
    get: operations["SiteServer_GetSiteResolveStatus"];
  };
  "/v1/cdn/site/speed-optimize/{site_id}": {
    get: operations["SiteServer_GetSiteSpeedOptimize"];
    put: operations["SiteServer_UpdateSiteSpeedOptimize"];
  };
  "/v1/cdn/site/ssl-config/{site_id}": {
    get: operations["SiteServer_GetSiteSslConfig"];
    put: operations["SiteServer_UpdateSiteSslConfig"];
  };
  "/v1/cdn/site/transform-rule/{site_id}": {
    get: operations["SiteServer_ListSiteTransFormRule"];
  };
  "/v1/cdn/site/transform-rule/{site_id}/{rule_id}": {
    get: operations["SiteServer_GetTransFormRule"];
    put: operations["SiteServer_UpdateTransFormRule"];
    delete: operations["SiteServer_DeleteTransFormRule"];
  };
  "/v1/cdn/site/transform-rule/{site_id}/{rule_type}": {
    post: operations["SiteServer_CreateSiteTransFormRule"];
  };
  "/v1/cdn/site/waf-rule/{site_id}": {
    get: operations["SiteServer_ListSiteWafRule"];
    post: operations["SiteServer_CreatSiteWafRule"];
  };
  "/v1/cdn/site/waf-rule/{site_id}/{rule_id}": {
    get: operations["SiteServer_GetSiteWafRule"];
    put: operations["SiteServer_UpdateSiteWafRule"];
    delete: operations["SiteServer_DeleteSiteWafRule"];
  };
  "/v1/cdn/site/{site_id}": {
    get: operations["SiteServer_GetSite"];
    delete: operations["SiteServer_DeleteSite"];
  };
  "/v1/cdn/statistic/bandwidth/list": {
    get: operations["StatisticService_BandwidthList"];
  };
  "/v1/cdn/statistic/code/list": {
    get: operations["StatisticService_CodeList"];
  };
  "/v1/cdn/statistic/hitrate/list": {
    get: operations["StatisticService_HitRateList"];
  };
  "/v1/cdn/statistic/ips/list": {
    get: operations["StatisticService_IpsList"];
  };
  "/v1/cdn/statistic/menaces/list": {
    get: operations["StatisticService_MenacesList"];
  };
  "/v1/cdn/statistic/overview/data": {
    get: operations["StatisticService_UserSummaryDataInfo"];
  };
  "/v1/cdn/statistic/overview/site-top": {
    get: operations["StatisticService_UserSummarySiteTopInfo"];
  };
  "/v1/cdn/statistic/overview/waf": {
    get: operations["StatisticService_UserSummaryWafInfo"];
  };
  "/v1/cdn/statistic/prevents/list": {
    get: operations["StatisticService_PreventsList"];
  };
  "/v1/cdn/statistic/proper/content/list": {
    get: operations["StatisticService_ProperContentList"];
  };
  "/v1/cdn/statistic/request/list": {
    get: operations["StatisticService_RequestList"];
  };
  "/v1/cdn/statistic/summary/proper": {
    get: operations["StatisticService_ProperSummaryInfo"];
  };
  "/v1/cdn/statistic/summary/traffic": {
    get: operations["StatisticService_TrafficSummaryInfo"];
  };
  "/v1/cdn/statistic/summary/waf": {
    get: operations["StatisticService_WafSummaryInfo"];
  };
  "/v1/cdn/statistic/top/domain/list": {
    get: operations["StatisticService_TopDomainList"];
  };
  "/v1/cdn/statistic/top/referer-request/list": {
    get: operations["StatisticService_TopRefererRequestList"];
  };
  "/v1/cdn/statistic/top/referer-traffic/list": {
    get: operations["StatisticService_TopRefererTrafficList"];
  };
  "/v1/cdn/statistic/top/ua-browser-request/list": {
    get: operations["StatisticService_TopUaBrowserRequestList"];
  };
  "/v1/cdn/statistic/top/ua-browser-traffic/list": {
    get: operations["StatisticService_TopUaBrowserTrafficList"];
  };
  "/v1/cdn/statistic/top/ua-device-request/list": {
    get: operations["StatisticService_TopUaDeviceRequestList"];
  };
  "/v1/cdn/statistic/top/ua-device-traffic/list": {
    get: operations["StatisticService_TopUaDeviceTrafficList"];
  };
  "/v1/cdn/statistic/top/ua-system-request/list": {
    get: operations["StatisticService_TopUaSystemRequestList"];
  };
  "/v1/cdn/statistic/top/ua-system-traffic/list": {
    get: operations["StatisticService_TopUaSystemTrafficList"];
  };
  "/v1/cdn/statistic/top/url-request/list": {
    get: operations["StatisticService_TopUrlRequestList"];
  };
  "/v1/cdn/statistic/top/url-traffic/list": {
    get: operations["StatisticService_TopUrlTrafficList"];
  };
  "/v1/cdn/statistic/traffic/list": {
    get: operations["StatisticService_TrafficList"];
  };
  "/v1/cdn/statistic/user_region_request/list": {
    get: operations["StatisticService_UserRegionRequestList"];
  };
  "/v1/cdn/statistic/user_region_traffic/list": {
    get: operations["StatisticService_UserRegionTrafficList"];
  };
  "/v1/cdn/statistic/waf/list": {
    get: operations["StatisticService_WafList"];
  };
  "/v1/collect/user/summary": {
    get: operations["CollectSrv_CollectUserSummary"];
  };
  "/v1/conf": {
    get: operations["ConfSrv_GetConf"];
  };
  "/v1/dns/config": {
    get: operations["Config_GetConfig"];
  };
  "/v1/dns/domain": {
    get: operations["Domain_GetDomain"];
    put: operations["Domain_UpdateDomain"];
    post: operations["Domain_CreateDomain"];
    delete: operations["Domain_DeleteDomain"];
  };
  "/v1/dns/domain/acquire/txt": {
    get: operations["Domain_GetAcquireDomainTxt"];
  };
  "/v1/dns/domain/group": {
    get: operations["DomainGroup_GetDomainGroup"];
    put: operations["DomainGroup_UpdateDomainGroup"];
    post: operations["DomainGroup_CreateDomainGroup"];
    delete: operations["DomainGroup_DeleteDomainGroup"];
  };
  "/v1/dns/domain/group/domains": {
    put: operations["DomainGroup_AddGroupDomains"];
    delete: operations["DomainGroup_DeleteDomainGroups"];
  };
  "/v1/dns/domain/group/remark": {
    put: operations["DomainGroup_UpdateDomainGroupRemark"];
  };
  "/v1/dns/domain/groups": {
    get: operations["DomainGroup_ListDomainGroup"];
  };
  "/v1/dns/domain/ns_status": {
    get: operations["Domain_GetDomainNsStatus"];
  };
  "/v1/dns/domain/validate_ns": {
    post: operations["Domain_ValidDomainNs"];
  };
  "/v1/dns/domains": {
    get: operations["Domain_ListDomain"];
    post: operations["Domain_CreateDomains"];
  };
  "/v1/dns/domains/acquire": {
    post: operations["Domain_BatchAcquireDomains"];
  };
  "/v1/dns/domains/batch": {
    post: operations["Domain_BatchCreateDomains"];
  };
  "/v1/dns/rr": {
    get: operations["Rr_GetRr"];
    put: operations["Rr_UpdateRr"];
    post: operations["Rr_CreateRr"];
    delete: operations["Rr_DeleteRr"];
  };
  "/v1/dns/rrs": {
    get: operations["Rr_ListRr"];
    delete: operations["Rr_DeleteRrs"];
  };
  "/v1/dns/rrs/batch": {
    put: operations["Rr_BatchUpdateRrs"];
    post: operations["Rr_BatchCreateRrs"];
    delete: operations["Rr_BatchDeleteRrs"];
  };
  "/v1/dns/rrs/batch_line": {
    post: operations["Rr_BatchCreateRrsLine"];
  };
  "/v1/dns/rrs/status": {
    put: operations["Rr_UpdateRrsStatus"];
  };
  "/v1/document": {
    get: operations["DocumentSrv_QueryDocument"];
  };
  "/v1/document/info": {
    get: operations["DocumentSrv_GetDocumentInfo"];
  };
  "/v1/document/search": {
    get: operations["DocumentSrv_SearchDocument"];
  };
  "/v1/domains": {
    post: operations["StorageDomain_CreateBucketDomain"];
    delete: operations["StorageDomain_DeleteBucketDomain"];
  };
  "/v1/domains/bucket": {
    post: operations["StorageDomain_ListUnderBucket"];
  };
  "/v1/domains/default": {
    post: operations["StorageDomain_SetDefaultDomain"];
  };
  "/v1/domains/ssl": {
    put: operations["StorageDomain_EditSsl"];
    post: operations["StorageDomain_ListSsl"];
  };
  "/v1/guide": {
    get: operations["GuideSrv_QueryGuide"];
  };
  "/v1/message": {
    get: operations["MessageSrv_QueryMessageUser"];
    put: operations["MessageSrv_UpsertMessageUser"];
  };
  "/v1/message/all": {
    put: operations["MessageSrv_UpdateAllStatus"];
  };
  "/v1/message/info": {
    get: operations["MessageSrv_GetMessageInfo"];
  };
  "/v1/message/summary": {
    get: operations["MessageSrv_QueryMessageSummary"];
  };
  "/v1/message/type": {
    get: operations["MessageSrv_GetMessageType"];
  };
  "/v1/mts/collect/dosage": {
    get: operations["CollectSrv_CollectDosage"];
  };
  "/v1/mts/preset": {
    get: operations["PresetSrv_QueryPreset"];
    delete: operations["PresetSrv_DelPreset"];
  };
  "/v1/mts/preset/font": {
    get: operations["PresetSrv_GetFont"];
  };
  "/v1/mts/preset/info": {
    get: operations["PresetSrv_GetPreset"];
  };
  "/v1/mts/preset/preview": {
    get: operations["PresetSrv_GetWatermarkPreview"];
  };
  "/v1/mts/preset/screenshot": {
    put: operations["PresetSrv_UpdatePresetScreenshot"];
    post: operations["PresetSrv_CreatePresetScreenshot"];
  };
  "/v1/mts/preset/splice": {
    put: operations["PresetSrv_UpdatePresetSplice"];
    post: operations["PresetSrv_CreatePresetSplice"];
  };
  "/v1/mts/preset/video": {
    put: operations["PresetSrv_UpdatePresetVideo"];
    post: operations["PresetSrv_CreatePresetVideo"];
  };
  "/v1/mts/preset/watermark": {
    put: operations["PresetSrv_UpdatePresetWatermark"];
    post: operations["PresetSrv_CreatePresetWatermark"];
  };
  "/v1/mts/queue": {
    get: operations["QueueSrv_QueryQueue"];
    put: operations["QueueSrv_UpdateQueue"];
    post: operations["QueueSrv_CreateQueue"];
    delete: operations["QueueSrv_DelQueue"];
  };
  "/v1/mts/queue/index": {
    put: operations["QueueSrv_UpdateProductIndex"];
  };
  "/v1/mts/queue/info": {
    get: operations["QueueSrv_QueueInfo"];
  };
  "/v1/mts/task": {
    get: operations["TaskSrv_QueryTask"];
    post: operations["TaskSrv_CreateTask"];
  };
  "/v1/mts/task/info": {
    get: operations["TaskSrv_GetTaskInfo"];
  };
  "/v1/mts/task/retry": {
    put: operations["TaskSrv_RetryTask"];
  };
  "/v1/mts/task/verify": {
    get: operations["TaskSrv_CreateTaskVerify"];
  };
  "/v1/mts/trigger": {
    get: operations["TriggerSrv_QueryTrigger"];
    post: operations["TriggerSrv_CreateTrigger"];
    delete: operations["TriggerSrv_DelTrigger"];
  };
  "/v1/mts/trigger/info": {
    get: operations["TriggerSrv_TriggerInfo"];
  };
  "/v1/mts/trigger/status": {
    put: operations["TriggerSrv_UpdateTriggerStatus"];
  };
  "/v1/mts/workflow": {
    get: operations["WorkflowSrv_QueryWorkflow"];
    put: operations["WorkflowSrv_UpdateWorkflow"];
    post: operations["WorkflowSrv_CreateWorkflow"];
    delete: operations["WorkflowSrv_DelWorkflow"];
  };
  "/v1/mts/workflow/info": {
    get: operations["WorkflowSrv_WorkflowInfo"];
  };
  "/v1/objects": {
    get: operations["Object_Download"];
    post: operations["Object_Upload"];
    delete: operations["Object_Remove"];
  };
  "/v1/objects/dir": {
    post: operations["Object_MkDir"];
  };
  "/v1/objects/list": {
    get: operations["Object_List"];
  };
  "/v1/objects/metadata": {
    get: operations["Object_GetMetadata"];
    put: operations["Object_PutMetadata"];
  };
  "/v1/objects/multipart": {
    put: operations["Object_CompleteMultipartUpload"];
    post: operations["Object_CreateMultipartUpload"];
  };
  "/v1/objects/multipart/piece": {
    post: operations["Object_UploadPart"];
  };
  "/v1/objects/multipart/piece_form/{bucket_id}/{upload_id}/{part_number}": {
    post: operations["Object_UploadPartForm"];
  };
  "/v1/objects/pre_sign": {
    post: operations["Object_PreSign"];
  };
  "/v1/objects/upload_check": {
    post: operations["Object_UploadCheck"];
  };
  "/v1/overview/resource": {
    get: operations["Overview_GetResourceOverview"];
  };
  "/v1/product": {
    get: operations["ProductSrv_QueryProduct"];
  };
  "/v1/product/info": {
    get: operations["ProductSrv_GetProductInfo"];
  };
  "/v1/regions": {
    get: operations["Region_List"];
  };
  "/v1/sites/certificates/edges-apis/{id}": {
    get: operations["CertificateService_GetEdgeCertificateApiFile"];
  };
  "/v1/sites/certificates/stat": {
    get: operations["CertificateService_CertificateStat"];
  };
  "/v1/sites/{site_id}/certificates/edge-apis": {
    get: operations["CertificateService_EdgeCertificateApiList"];
  };
  "/v1/sites/{site_id}/certificates/edges": {
    get: operations["CertificateService_GetEdgeCertificate"];
    post: operations["CertificateService_UploadEdgeCertificate"];
  };
  "/v1/sites/{site_id}/certificates/origins": {
    get: operations["CertificateService_OriginCertificateList"];
    post: operations["CertificateService_CreateOriginCertificate"];
  };
  "/v1/sites/{site_id}/certificates/{id}": {
    get: operations["CertificateService_GetOriginCertificate"];
  };
  "/v1/ssl/certificates": {
    get: operations["CertificateSrv_ListCertificate"];
    delete: operations["CertificateSrv_DeleteCertificate"];
  };
  "/v1/ssl/certificates/batch-update": {
    put: operations["CertificateSrv_BatchUpdateCertificate"];
  };
  "/v1/ssl/certificates/download": {
    post: operations["CertificateSrv_DownloadCertificate"];
  };
  "/v1/ssl/certificates/revoke": {
    put: operations["CertificateSrv_RevokeCertificate"];
  };
  "/v1/ssl/certificates/stat": {
    get: operations["CertificateSrv_GetCertificateStat"];
  };
  "/v1/ssl/certificates/upload": {
    post: operations["CertificateSrv_UploadCertificate"];
  };
  "/v1/ssl/certificates/{id}": {
    get: operations["CertificateSrv_GetCertificate"];
  };
  "/v1/ssl/certificates/{id}/file": {
    get: operations["CertificateSrv_GetCertificateFile"];
  };
  "/v1/ssl/certificates/{id}/update": {
    put: operations["CertificateSrv_UpdateCertificate"];
  };
  "/v1/ssl/configs": {
    get: operations["ConfigSrv_GetConfig"];
  };
  "/v1/ssl/obtains": {
    get: operations["ObtainSrv_ListObtain"];
    post: operations["ObtainSrv_ObtainCert"];
  };
  "/v1/ssl/obtains/batch": {
    post: operations["ObtainSrv_BatchObtainCert"];
  };
  "/v1/ssl/obtains/cancel": {
    post: operations["ObtainSrv_CancelObtain"];
  };
  "/v1/ssl/obtains/dns-detect": {
    get: operations["ObtainSrv_DnsServiceDetect"];
  };
  "/v1/ssl/obtains/domain-verify": {
    post: operations["ObtainSrv_DomainListVerify"];
  };
  "/v1/ssl/obtains/stat": {
    get: operations["ObtainSrv_ObtainStat"];
  };
  "/v1/ssl/obtains/{id}": {
    get: operations["ObtainSrv_GetObtain"];
    put: operations["ObtainSrv_UpdateObtain"];
  };
  "/v1/ssl/obtains/{id}/dns-passed": {
    post: operations["ObtainSrv_ObtainCertPassedDNS"];
  };
  "/v1/ssl/obtains/{id}/dns-verify": {
    post: operations["ObtainSrv_DnsVerify"];
  };
  "/v1/ssl/renews/batch": {
    post: operations["ObtainSrv_BatchRenewCert"];
  };
  "/v1/ssl/renews/{id}": {
    post: operations["ObtainSrv_RenewCert"];
  };
  "/v1/sso/login": {
    post: operations["Sso_SsoLogin"];
  };
  "/v1/sso/logout": {
    delete: operations["Sso_SsoLogout"];
  };
  "/v1/sso/ticket/verify": {
    post: operations["Sso_SsoVerifyTicket"];
  };
  "/v1/sso/verify": {
    post: operations["Sso_SsoVerifyLogin"];
  };
  "/v1/statistic/bucket/overview": {
    post: operations["Statistic_BucketOverview"];
  };
  "/v1/statistic/bucket_used_summary": {
    get: operations["Statistic_BucketUsedSummary"];
  };
  "/v1/statistic/inflow_trend": {
    post: operations["Statistic_InflowTrend"];
  };
  "/v1/statistic/obj_req_trend": {
    post: operations["Statistic_ObjReqTrend"];
  };
  "/v1/statistic/outflow_trend": {
    post: operations["Statistic_OutflowTrend"];
  };
  "/v1/statistic/overview": {
    post: operations["Statistic_Overview"];
  };
  "/v1/statistic/storage_trend": {
    post: operations["Statistic_StorageTrend"];
  };
  "/v1/statistic/upload_trend": {
    post: operations["Statistic_UploadTrend"];
  };
  "/v1/upload": {
    post: operations["ConfSrv_Upload"];
  };
  "/v1/user": {
    get: operations["Sso_GetUserInfo"];
    put: operations["Sso_UpdateUser"];
  };
  "/v1/user/login_records": {
    get: operations["Sso_ListUserLoginRecord"];
  };
  "/v1/user/password": {
    put: operations["Sso_UpdateUserPassword"];
  };
  "/v1/user/password/recover": {
    put: operations["Sso_RecoverUserPassword"];
  };
  "/v1/user/register": {
    post: operations["Sso_RegisterUser"];
  };
  "/v1/user/visit/event": {
    post: operations["Sso_CreateUserVisitEvent"];
  };
  "/v1/workerorder": {
    get: operations["WorkerOrderService_InfoWorkerOrder"];
    post: operations["WorkerOrderService_CreateWorkerOrder"];
  };
  "/v1/workerorder/end": {
    post: operations["WorkerOrderService_EndWorkerOrder"];
  };
  "/v1/workerorder/list": {
    get: operations["WorkerOrderService_ListWorkerOrder"];
  };
  "/v1/workerorderdetails": {
    post: operations["WorkerOrderService_SendWorkerOrderMsg"];
  };
  "/v1/workerorderdetails/list": {
    get: operations["WorkerOrderService_ListWorkerOrderDetails"];
  };
  "/v1/workerorderdetails/read": {
    post: operations["WorkerOrderService_ReadWorkerOrderMsg"];
  };
  "/v1/workerorderdetails/unread/count": {
    get: operations["WorkerOrderService_UnreadWorkerOrderMsgCount"];
  };
  "/v1/workerordertype/filter/list": {
    get: operations["WorkerOrderService_GetWorkerOrderType"];
  };
  "/v1/workerordertype/product/list": {
    get: operations["WorkerOrderService_ProductList"];
  };
}

export interface definitions {
  /**
   * - 1: 白名单
   *  - 2: 黑名单
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  AntiStealingLinkDomainMode: 0 | 1 | 2;
  FontResponsefont: {
    /** 名字 */
    name?: string;
    /**
     * 值
     * Format: int32
     */
    key?: number;
  };
  /**
   * 存储空间单位
   * Format: int32
   * @description - 1: GB
   *  - 2: TB
   *  - 3: PB
   * @default 0
   * @enum {integer}
   */
  OssStorageSpaceUnit: 0 | 1 | 2 | 3;
  announcementGetAnnouncementInfoResponse: {
    /** 公告UID */
    id?: string;
    /** 标题 */
    title?: string;
    /** 内容 */
    content?: string;
    /** 创建人 */
    create_account?: string;
    /**
     * 已读人数
     * Format: int32
     */
    read_count?: number;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 状态
     * Format: int32
     */
    status?: number;
    /**
     * 弹窗类型
     * Format: int32
     */
    alert_type?: number;
  };
  announcementQueryAnnouncementResponse: {
    list?: definitions["announcementGetAnnouncementInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  announcementUpsertAnnouncementUserRequest: {
    /**
     * [必填] ID 数组
     * @example [
     *   16321254231132
     * ]
     */
    announcement_id_list?: string[];
  };
  apiv1ResponseEmpty: { [key: string]: unknown };
  /**
   * 缓存级别  0：旁路，1：无查询字符串(没有查询字符串)，2：隐藏查询字符串（忽略查询字符串），3：标准
   * Format: int32
   * @description - 0: 旁路
   *  - 1: 无查询字符串(没有查询字符串)
   *  - 2: 隐藏查询字符串（忽略查询字符串）
   *  - 3: 标准
   * @default 0
   * @enum {integer}
   */
  atsCacheLevel: 0 | 1 | 2 | 3;
  /** 指标项 */
  clientuserAlarmItem: {
    /**
     * 告警类型
     * Format: int64
     */
    type?: string;
    /**
     * 产品类型
     * @description 类型说明 3：云存储 OSS  4：云转码 MTS 5：云分发 CDN  6：云解析 DNS 7：SSL 证书
     */
    product_type?: definitions["typeProductType"];
    /** 标题 */
    title?: string;
  };
  clientuserTag: {
    /**
     * id
     * Format: int64
     */
    id?: string;
    /**
     * 用户id
     * Format: int64
     */
    user_id?: string;
    /** 键 */
    key?: string;
    /** 值 */
    val?: string;
  };
  /** 关于我们配置 */
  confAboutUsConf: {
    /** 描述 */
    describe?: string;
    /** 内容 */
    content?: string;
  };
  /** 基础配置 */
  confBaseConf: {
    /** 用户端名称 */
    client_name?: string;
    /** logo */
    client_logo?: string;
    /** 备案号 */
    record_number?: string;
  };
  confConfResponse: {
    /** 用户注册配置 */
    user_register_conf?: definitions["confUserRegisterConf"];
    /** 基础配置 */
    base_conf?: definitions["confBaseConf"];
    /** 站内优化 */
    system_conf_seo_conf?: definitions["confSystemConfSeoConf"];
    /** 联系配置 */
    connect_conf?: definitions["confConnectConf"];
    /** 协议配置 */
    protocol_conf?: definitions["confProtocolConf"];
    /** 域名配置 */
    domain_conf?: definitions["confDomainConf"];
    /** 证书申请配置 */
    about_us_conf?: definitions["confAboutUsConf"];
    /** 行为验证码开关配置 */
    behavioral_captcha_conf?: definitions["sysconfBehavioralCaptchaSwitch"];
  };
  /** 联系方式配置 */
  confConnectConf: {
    /** 联系电话 */
    phone?: string;
    /** 联系邮箱 */
    email?: string;
    /** QQ */
    qq?: string;
    /** 电报 */
    telegram?: string;
    /** Skype */
    skype?: string;
  };
  /** 域名配置 */
  confDomainConf: {
    /** 主域名 */
    master_domain?: string;
    /** 控制台 */
    portal_domain?: string;
    /** api */
    api_domain?: string;
    /** 开放接口 */
    openapi_domain?: string;
    /** 静态 */
    static_domain?: string;
    /** sso */
    sso_domain?: string;
    /** 客服 */
    web_chat_domain?: string;
  };
  /** 协议配置 */
  confProtocolConf: {
    /** 协议内容 */
    content?: string;
  };
  /** 站内优化 */
  confSystemConfSeoConf: {
    /** 标题 */
    title?: string;
    /** 关键字 */
    keywords?: string;
    /** 说明 */
    directions?: string;
  };
  confUploadResponse: {
    /** 访问路径 */
    filepath?: string;
  };
  /** 用户注册类型 */
  confUserRegisterConf: {
    /** {注册类型， 1:用户名注册，2：邮箱注册} */
    register_type_list?: number[];
  };
  /**
   * Action 转换规则操作类型
   * Format: int32
   * @description - 1: 1 添加头
   *  - 3: 3移除头
   * @default 0
   * @enum {integer}
   */
  corepbsiteAction: 0 | 1 | 2 | 3;
  /** 页面规则 */
  corepbsitePageRule: {
    /**
     * 节点缓存ttl 秒
     * Format: int64
     */
    edge_cache_ttl?: string;
    /** cache_level 缓存级别 */
    cache_level?: definitions["atsCacheLevel"];
    /** disable_security 禁用安全 1 开启 2 关闭 */
    disable_security?: boolean;
    /** disable_perf 禁用性能 1 开启 2 关闭 */
    disable_perf?: boolean;
    /**
     * browser_ttl 浏览器缓存TTl 秒
     * Format: int64
     */
    browser_ttl?: string;
    /** forwarding_url 转发url */
    forwarding_url?: definitions["siteForwardingUrl"];
    /** auto_minify 性能优化 */
    auto_minify?: definitions["siteAutoMinify"];
    /** ip_geolocation_header ip地理位置头 1 开启 2 关闭 */
    ip_geolocation_header?: boolean;
    /** true_client_ip 启用客户端ip 1 开启 2 关闭 */
    true_client_ip?: boolean;
    /**
     * 始终https 1 开启 2 关闭
     * @description 自动https重写 1 开启 2 关闭
     *   optional corepb.global.RunState auto_https_rewrite = 11 [(validate.rules).bool.const = true];
     *  origin_cache_control 原始缓存控制  1 开启 2 关闭
     *   optional corepb.global.RunState origin_cache_control = 12 [(validate.rules).bool.const = true];
     *  security_level 安全级别 0 关 1 低 2 中 3 高 4 under attack
     *   optional corepb.site.SecuritySettingLevel security_level = 13 [(validate.rules).bool.const = true];
     *  server_side_exclude 服务器端排除 1 开启 2 关闭
     *   optional corepb.global.RunState server_side_exclude = 14 [(validate.rules).bool.const = true];
     */
    always_https?: boolean;
  };
  /** 速度优化配置 */
  corepbsiteSpeedOptimization: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** 是否开启css优化 1 是 2 否 */
    enable_css_auto_minify?: definitions["globalRunState"];
    /** 是否开启html优化 1 是 2 否 */
    enable_html_auto_minify?: definitions["globalRunState"];
    /** 是否开启js优化 1 是 2 否 */
    enable_js_auto_minify?: definitions["globalRunState"];
    /**
     * 是否开启预加载 1 是 2 否(预留字段)
     *  corepb.global.RunState enable_pre_read_url = 5 [(validate.rules).enum = {in:[1,2]}];
     * 是否开启gzip压缩 1 是 2 否
     */
    enable_gzip?: definitions["globalRunState"];
  };
  documentGetDocumentInfoResponse: {
    /** 文档UID */
    id?: string;
    /** 标题 */
    title?: string;
    /** 内容 */
    content?: string;
    /** 创建人 */
    create_account?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 最近更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 文件类型{1:目录，2：文本}
     * Format: int32
     */
    file_type?: number;
    /**
     * 文档类型{1:产品文档，2：常见问题}
     * Format: int32
     */
    document_type?: number;
    /** 父类ID，如果是1级目录就是1,其他级就是该父级的ID */
    parent_id?: string;
    /** 产品ID */
    product_id?: string;
    /**
     * 序号
     * Format: int32
     */
    index?: number;
    /** 产品名称 */
    product_name?: string;
    /** 父级名称 */
    parent_name?: string;
  };
  documentQueryDocumentResponse: {
    list?: definitions["documentGetDocumentInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  /**
   * DDOSManagedRuleSensitivity  // 规则灵敏度 2 高 1 中 0 低
   * Format: int32
   * @description - 0: 低
   *  - 1: 中
   *  - 2: 高
   * @default 0
   * @enum {integer}
   */
  globalDDOSManagedRuleSensitivity: 0 | 1 | 2;
  /** GlobalManagedRule 托管规则（预制规则） */
  globalGlobalManagedRule: {
    /** Format: int64 */
    rule_id?: string;
    /** md5值 （规则id） */
    md5?: string;
    description?: string;
    /** 操作 */
    operation?: definitions["globalWafOperation"];
    /** // 规则灵敏度 2 高 1 中 0 低 */
    sensitivity_level?: definitions["globalDDOSManagedRuleSensitivity"];
  };
  /**
   * PrefabRuleType 安全配置预制规则类型
   * Format: int32
   * @description - 0: WAF
   *  - 1: ddos
   * @default 0
   * @enum {integer}
   */
  globalPrefabRuleType: 0 | 1;
  /**
   * RunState 运行状态，1开启，2关闭
   * Format: int32
   * @description - 1: 开启
   *  - 2: 关闭
   * @default 0
   * @enum {integer}
   */
  globalRunState: 0 | 1 | 2;
  /**
   * waf操作枚举
   * Format: int32
   * @description - 0: 允许
   *  - 1: 拒绝
   *  - 2: 绕过
   *  - 3: 挑战
   *  - 4: JS
   *  - 5: 验证码
   *  - 6: 动态
   * @default 0
   * @enum {integer}
   */
  globalWafOperation: 0 | 1 | 2 | 3 | 4 | 5 | 6 | -1;
  guideGetGuideInfoResponse: {
    /** 指南UID */
    id?: string;
    /** 标题 */
    title?: string;
    /** 文档UID */
    document_id?: string;
    /** 创建人 */
    create_account?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 最近更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 文档类型{1:产品文档，2：常见问题}
     * Format: int32
     */
    document_type?: number;
    /**
     * 序号
     * Format: int32
     */
    index?: number;
    /** 产品名称 */
    product_name?: string;
    /** 父级名称 */
    parent_name?: string;
    /** 产品ID */
    product_id?: string;
  };
  guideQueryGuideResponse: {
    list?: definitions["guideGetGuideInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  messageGetMessageInfoResponse: {
    /** 消息UID */
    id?: string;
    /** 标题 */
    title?: string;
    /** 消息类型 */
    type_id?: string;
    /**
     * 发布时间
     * Format: int64
     */
    release_time?: string;
    /** 内容 */
    content?: string;
    /** 创建人 */
    create_account?: string;
    /** 消息类型名称 */
    type_name?: string;
  };
  messageGetMessageTypeListResponse: {
    list?: definitions["messageGetMessageTypeResponse"][];
    /** Format: int64 */
    total?: string;
  };
  messageGetMessageTypeResponse: {
    /** 消息UID */
    id?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /** 消息类型名称 */
    type_name?: string;
    /**
     * 默认消息
     * Format: int64
     */
    default?: string;
  };
  messageMessage: {
    /** 消息UID */
    id?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 已读状态{1：已读，2:未读}
     * Format: int64
     */
    read?: string;
    /** 标题 */
    title?: string;
    /** 消息类型 */
    type_id?: string;
    /**
     * 发布时间
     * Format: int64
     */
    release_time?: string;
    /** 消息类型名称 */
    type_name?: string;
  };
  messageQueryMessageResponse: {
    list?: definitions["messageMessage"][];
    /** Format: int64 */
    total?: string;
  };
  messageQueryMessageSummaryResponse: {
    /**
     * 工单消息未读总数
     * Format: int64
     */
    worker_order_unread_count?: string;
    /**
     * 系统消息未读总数
     * Format: int64
     */
    message_unread_count?: string;
  };
  messageUpdateAllStatusRequest: {
    /**
     * 消息类型
     * Format: int64
     */
    type_id?: string;
    /**
     * 状态{1：已读，2删除}
     * Format: int32
     * @example 1
     */
    status: number;
  };
  messageUpsertMessageUserRequest: {
    /**
     * 消息类型
     * Format: int64
     * @example 1
     */
    type_id: string;
    /**
     * [必填] 消息ID 数组
     * @example [
     *   16321254231132
     * ]
     */
    message_id_list?: string[];
    /**
     * 状态{1：已读，2：删除}
     * Format: int32
     * @example 1
     */
    status: number;
  };
  /**
   * - 1: mp3
   *  - 2: acc
   *  - 3: acc_he
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsAudioEncodingFormatType: 0 | 1 | 2 | 3;
  /**
   * - 1: 是
   *  - 2: 否
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsEnable: 0 | 1 | 2;
  /**
   * - 1: 方正宋体
   *  - 2: 方正黑体
   *  - 3: 方正楷体
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsFontType: 0 | 1 | 2 | 3;
  /**
   * - 1: 左上
   *  - 2: 中上
   *  - 3: 右上
   *  - 4: 左中
   *  - 5: 中
   *  - 6: 右中
   *  - 7: 左下
   *  - 8: 中下
   *  - 9: 右下
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsLocationType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
  /**
   * - 1: 全匹配
   *  - 2: 前缀匹配
   *  - 3: 后缀匹配
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsMatchRuleType: 0 | 1 | 2 | 3;
  /**
   * - 1: 视频预设
   *  - 2: 水印预设
   *  - 3: 截图预设
   *  - 4: 拼接预设
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsPresetType: 0 | 1 | 2 | 3 | 4;
  /**
   * - 1: 低清
   *  - 2: 普清
   *  - 3: 标清
   *  - 4: 高清
   *  - 5: 2K
   *  - 6: 4K
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsResolutionType: 0 | 1 | 2 | 3 | 4 | 5 | 6;
  /**
   * - 1: jpg
   *  - 2: png
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsScreenshotImageType: 0 | 1 | 2;
  /**
   * - 1: 单张
   *  - 2: 多张
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsScreenshotType: 0 | 1 | 2;
  /**
   * - 1: 排队中
   *  - 2: 处理中
   *  - 3: 成功
   *  - 4: 失败
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsTaskStatusType: 0 | 1 | 2 | 3 | 4;
  /**
   * - 1: 从开始算
   *  - 2: 从结束往前算
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsTimeLineType: 0 | 1 | 2;
  /**
   * - 1: H264
   *  - 2: H265
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsVideoEncodingFormatType: 0 | 1 | 2;
  /**
   * - 1: Mp4
   *  - 2: Flv
   *  - 3: Hls
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsVideoFormatType: 0 | 1 | 2 | 3;
  /**
   * - 1: 图片水印
   *  - 2: 文字水印
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsWatermarkType: 0 | 1 | 2;
  /**
   * - 1: 视频
   *  - 2: 拼接
   *  - 3: 截图
   *  - 4: 输出
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  mtsWorkflowConfType: 0 | 1 | 2 | 3 | 4;
  productGetProductInfoResponse: {
    /** 产品UID */
    id?: string;
    /** 名称 */
    name?: string;
    /** 标识 */
    symbol?: string;
    /** 创建人 */
    create_account?: string;
    /** icon */
    icon?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 状态
     * Format: int32
     */
    status?: number;
    /**
     * 排序序号
     * Format: int32
     */
    index?: number;
  };
  productQueryProductResponse: {
    list?: definitions["productGetProductInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  /** cdn */
  productUserResourceOverviewCdn: {
    /**
     * 站点总数
     * Format: int64
     */
    site_count?: string;
    /**
     * 总请求
     * Format: int64
     */
    total_request_count?: string;
    /**
     * 总节约流量（单位：byte）
     * Format: int64
     */
    total_hit_bytes?: string;
  };
  /** dns */
  productUserResourceOverviewDns: {
    /**
     * 域名数量
     * Format: int64
     */
    domain_count?: string;
    /**
     * DNS服务器数量
     * Format: int64
     */
    abnormal_domain_count?: string;
  };
  /** 转码 */
  productUserResourceOverviewMts: {
    /**
     * 转码总时长
     * Format: int64
     */
    total_duration?: string;
    /**
     * 截图总数量
     * Format: int64
     */
    total_screenshot_count?: string;
  };
  /** 存储 */
  productUserResourceOverviewOss: {
    /**
     * 存储空间 单位(byte)
     * Format: int64
     */
    storage_bytes?: string;
    /**
     * 空间数量
     * Format: int64
     */
    bucket_count?: string;
    /**
     * 文件数量
     * Format: int64
     */
    object_count?: string;
  };
  /** ssl */
  productUserResourceOverviewSsl: {
    /**
     * 申请总数量
     * Format: int64
     */
    total?: string;
    /**
     * 签发总数量
     * Format: int64
     */
    issued?: string;
    /**
     * 即将过期数
     * Format: int64
     */
    expiring?: string;
  };
  protobufAny: {
    "@type"?: string;
  } & { [key: string]: unknown };
  rpcStatus: {
    /** Format: int32 */
    code?: number;
    message?: string;
    details?: definitions["protobufAny"][];
  };
  /**
   * 回源协议 1 http 2 https
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  siteAccessOriginProtocol: 0 | 1 | 2;
  /** AntiStealingLink  防盗链 */
  siteAntiStealingLink: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** 防盗链开关 1 开 2 关 */
    enable_anti_stealing_link?: definitions["globalRunState"];
    /** 空Referer 1 合法 2 非法 */
    empty_referer_strategy?: definitions["globalRunState"];
    /** 黑白名单类型，1白名单 2黑名单 */
    domain_mode?: definitions["AntiStealingLinkDomainMode"];
    /** 防盗链名单 */
    domain_list?: string[];
  };
  /** AutoMinify 性能优化 */
  siteAutoMinify: {
    /** css 1 开启 2 关闭 */
    css?: definitions["globalRunState"];
    /** html 1 开启 2 关闭 */
    html?: definitions["globalRunState"];
    /** js 1 开启 2 关闭 */
    js?: definitions["globalRunState"];
  };
  /** 缓存配置 */
  siteCacheConfig: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /**
     * 总是在线 1 是 2 否
     *  corepb.global.RunState always_online = 2;
     * 浏览器缓存TTL 单位 秒
     * Format: int32
     */
    cache_in_minutes?: number;
    /** 缓存等级 */
    cache_level?: definitions["atsCacheLevel"];
  };
  /** ErrorPage 自定义错误页面 */
  siteErrorPage: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** 启用源错误页面 1 是 2 否 */
    err_from_origin?: definitions["globalRunState"];
    /** 500类错误码 */
    err_code_500?: string;
    /** IP 阻止/国家/地区阻止 */
    reject_since_ip_location?: string;
    /**
     * WAF阻止
     * @description 1000 类错误
     *   optional string err_1000 = 6;
     *  Always Online™ 错误
     *   optional string always_online = 7;
     *  托管质询
     *   optional string managed_challenge = 8;
     *  旧版 CAPTCHA 质询
     *   optional string captcha_challenge = 9;
     * 429 错误
     *   optional string rate_limiting = 10;
     */
    reject_waf?: string;
  };
  /** 转发URL */
  siteForwardingUrl: {
    /** 要跳转的url */
    destination_url?: string;
    /**
     * 跳转类型 301  302
     * Format: int32
     */
    status_code?: number;
  };
  siteHeadRewrite: {
    /** action 1 添加标头 2移除标头 */
    action?: definitions["corepbsiteAction"];
    name?: string;
    value?: string;
  };
  /** NetworkConfig 更新网络配置请求 */
  siteNetworkConfig: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** 支持http2 1 是 2 否 */
    enable_http_2?: definitions["globalRunState"];
    /** true_client_ip_mode 标头  1 标准模式 2 随机模式 3 透明代理 4 固定模式 5 禁用模式 */
    true_client_ip_mode?: definitions["siteTrueClientIpMode"];
    /** true_client_ip_value 固定模式的值 */
    true_client_ip_value?: string;
    /** 是否跟随源站 1 是 2 否 */
    follow_origin?: definitions["globalRunState"];
  };
  /** Origin 站点源站配置：SslConfig+SiteProtocolConfig+Origin ==> node协议配置 */
  siteOrigin: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** 协议,1 http,2 https */
    protocol?: definitions["siteAccessOriginProtocol"];
    /**
     * 优先级类型，1主，2备
     * Format: int32
     */
    priority_type?: number;
    origin_intel?: definitions["siteOriginInfo"][];
    /** 回源host,默认传空 */
    host?: string;
    /**
     * oss空间id
     * Format: int64
     */
    oss_bucket_id?: string;
    /** 源站类型 1.自有源 2.oss 源 */
    origin_type?: definitions["siteOriginType"];
  };
  /** OriginInfo 源站配置 */
  siteOriginInfo: {
    /** 源站域名/ip，优先类型级选择主，默认第一个为主ip */
    origin?: string;
    /**
     * 优先级/权重
     * Format: int32
     */
    priority?: number;
    /**
     * 端口
     * Format: int32
     */
    port?: number;
  };
  /**
   * - 1: 自有源
   *  - 2: OSS
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  siteOriginType: 0 | 1 | 2;
  /** 规则配置-页面规则 */
  sitePageRuleInfo: {
    /**
     * 规则id
     * Format: int64
     */
    rule_id?: string;
    /** 页面规则状态 1 开启 2 关闭 */
    status?: definitions["globalRunState"];
    /**
     * 页面规则优先级
     * Format: int64
     */
    priority?: string;
    /** url */
    url?: string;
    /** PageRule 规则 */
    rule?: definitions["corepbsitePageRule"];
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /** 页面规则名称 */
    name?: string;
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
  };
  /**
   * ssl协议模式 1 仅http 2 强制https 3 http和https
   * Format: int32
   * @description - 1: 仅http
   *  - 2: 强制https
   *  - 3: http + https
   * @default 0
   * @enum {integer}
   */
  siteSSlMode: 0 | 1 | 2 | 3;
  /** SiteTransFormRule 转换规则 */
  siteSiteTransFormRule: {
    /** Format: int64 */
    rule_id?: string;
    /**
     * 站点
     * Format: int64
     */
    site_id?: string;
    /** 规则名称 */
    name?: string;
    /** 规则状态 1 开启 2 关闭 */
    status?: definitions["globalRunState"];
    /**
     * 规则优先级
     * Format: int64
     */
    priority?: string;
    /** 表达式 */
    match_rule?: string;
    /** url重写转换规则 */
    url_rewrite_rule?: definitions["siteUrlRewrite"];
    /** HTTP请求头/HTTP响应头 */
    head_rewrite_rule?: definitions["siteHeadRewrite"][];
    /** 转换规则类型 1 请求头 2 响应头 3 url重写 */
    rule_type?: definitions["siteTransformRuleType"];
    /** 前端回显 */
    match_rule_template?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
  };
  /** 站点WAF规则 */
  siteSiteWafRule: {
    /**
     * 规则ID
     * Format: int64
     */
    rule_id?: string;
    /** 规则名称 */
    name?: string;
    /** 规则表达式 */
    rule?: string;
    /** 操作 0允许 1阻止 2绕过 3挑战 4JS 质询 5验证码 6DDos动态 */
    operation?: definitions["globalWafOperation"];
    /** @description 操作附加值 如 当operation为2时， 需要此字段不为空 ... */
    operation_addition_data?: string;
    /**
     * 优先级（更改后的优先级）
     * Format: int64
     */
    priority?: string;
    /** 是否启用 1 启用 2 禁用 */
    is_enable?: definitions["globalRunState"];
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** 规则表达式回显 */
    rule_template?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
  };
  /** SslConfig 协议配置：SslConfig+SiteProtocolConfig+Origin ==> node协议配置 */
  siteSslConfig: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** ssl协议模式 1 仅http 2 强制https 3 http和https */
    ssl_mode?: definitions["siteSSlMode"];
    /** 启用tls 3，1 启用，2禁用 */
    enable_tls_1_3?: definitions["globalRunState"];
    /**
     * https协议端口，ssl_mode=2参数,从用户端口接口获取
     * Format: int32
     */
    addition_port?: number;
  };
  /**
   * 规则配置-转换规则
   * Format: int32
   * @description - 1: 1 请求头
   *  - 2: 2 响应头
   *  - 3: 3 url重写
   * @default 0
   * @enum {integer}
   */
  siteTransformRuleType: 0 | 1 | 2 | 3;
  /**
   * TrueClientIpMode 标头  1 标准模式 2 随机模式 3 透明代理 4 固定模式 5.禁用模式
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  siteTrueClientIpMode: 0 | 1 | 2 | 3 | 4 | 5;
  /** UrlRewrite url重写 */
  siteUrlRewrite: {
    /** 路径，保留为空 */
    path?: string;
    /**
     * 查询字符串，保留为空，path和query不能两个都为保留
     * @description 路径动作 当设置路径为保留时， 此值不能为static 非保留时，此值为static
     *   Action path_action = 3;
     *   // 查询字符串动作 当查询为保留时， 此值不能为static 非保留时，此值为static
     *   Action query_action = 4;
     */
    query?: string;
  };
  statisticBandwidthListResponse: {
    list?: definitions["statisticBandwidthListResponseItem"][];
  };
  statisticBandwidthListResponseItem: {
    /** Format: int64 */
    time?: string;
    /**
     * 带宽
     * Format: int64
     */
    bandwidth?: string;
  };
  statisticCodeListResponse: {
    list?: definitions["statisticCodeListResponseItem"][];
  };
  statisticCodeListResponseItem: {
    /** 错误码 */
    code?: string;
    /**
     * 数量
     * Format: int64
     */
    count?: string;
    /**
     * 总数
     * Format: int64
     */
    total_count?: string;
  };
  statisticHitRateListResponse: {
    list?: definitions["statisticHitRateListResponseItem"][];
  };
  statisticHitRateListResponseItem: {
    /** Format: int64 */
    time?: string;
    /**
     * 请求命中率
     * Format: float
     */
    request_hit?: number;
    /**
     * 流量命中率
     * Format: float
     */
    traffic_hit?: number;
  };
  statisticIpsListResponse: {
    list?: definitions["statisticIpsListResponseItem"][];
  };
  statisticIpsListResponseItem: {
    /** Format: int64 */
    time?: string;
    /**
     * ip数
     * Format: int64
     */
    ips?: string;
  };
  statisticMenacesListResponse: {
    list?: definitions["statisticMenacesListResponseItem"][];
  };
  statisticMenacesListResponseItem: {
    /** Format: int64 */
    time?: string;
    /**
     * 威胁数
     * Format: int64
     */
    menaces?: string;
  };
  statisticPreventsListResponse: {
    list?: definitions["statisticPreventsListResponseItem"][];
  };
  statisticPreventsListResponseItem: {
    /** 国家或地区 */
    location?: string;
    /**
     * 区域防护数
     * Format: int64
     */
    prevents?: string;
    /**
     * 防护总数
     * Format: int64
     */
    total_prevents?: string;
  };
  statisticProperContentListResponse: {
    list?: definitions["statisticProperContentListResponseItem"][];
  };
  statisticProperContentListResponseItem: {
    /** 内容类型 */
    content?: string;
    /**
     * 类型数量
     * Format: int64
     */
    count?: string;
    /**
     * 总数
     * Format: int64
     */
    total_count?: string;
  };
  statisticProperSummaryInfoResponse: {
    /**
     * 总流量（单位：byte）
     * Format: int64
     */
    total_bytes?: string;
    /**
     * 总命中流量（单位：byte）
     * Format: int64
     */
    hit_bytes?: string;
  };
  statisticRequestListResponse: {
    list?: definitions["statisticRequestListResponseItem"][];
  };
  statisticRequestListResponseItem: {
    /** Format: int64 */
    time?: string;
    /**
     * 请求数
     * Format: int64
     */
    request_total?: string;
    /**
     * 命中请求数
     * Format: int64
     */
    hit_request_total?: string;
  };
  statisticTopDomainListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopDomainListResponseItem"][];
  };
  statisticTopDomainListResponseItem: {
    /** 域名 */
    domain?: string;
    /**
     * 流量
     * Format: int64
     */
    bytes?: string;
    /**
     * site id
     * Format: int64
     */
    site_id?: string;
  };
  statisticTopRefererRequestListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopRefererRequestListResponseItem"][];
  };
  statisticTopRefererRequestListResponseItem: {
    /** Referer */
    referer?: string;
    /**
     * 请求数
     * Format: int64
     */
    request?: string;
  };
  statisticTopRefererTrafficListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopRefererTrafficListResponseItem"][];
  };
  statisticTopRefererTrafficListResponseItem: {
    /** Referer */
    referer?: string;
    /**
     * 流量
     * Format: int64
     */
    bytes?: string;
  };
  statisticTopUaBrowserRequestListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUaBrowserRequestListResponseItem"][];
  };
  statisticTopUaBrowserRequestListResponseItem: {
    /** 浏览器 */
    browser?: string;
    /**
     * 请求数
     * Format: int64
     */
    requests?: string;
  };
  statisticTopUaBrowserTrafficListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUaBrowserTrafficListResponseItem"][];
  };
  statisticTopUaBrowserTrafficListResponseItem: {
    /** 浏览器 */
    browser?: string;
    /**
     * 流量
     * Format: int64
     */
    bytes?: string;
  };
  statisticTopUaDeviceRequestListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUaDeviceRequestListResponseItem"][];
  };
  statisticTopUaDeviceRequestListResponseItem: {
    /** 设备名称 */
    device?: string;
    /**
     * 请求数
     * Format: int64
     */
    requests?: string;
  };
  statisticTopUaDeviceTrafficListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUaDeviceTrafficListResponseItem"][];
  };
  statisticTopUaDeviceTrafficListResponseItem: {
    /** 设备名称 */
    device?: string;
    /**
     * 流量
     * Format: int64
     */
    bytes?: string;
  };
  statisticTopUaSystemRequestListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUaSystemRequestListResponseItem"][];
  };
  statisticTopUaSystemRequestListResponseItem: {
    /** 操作系统 */
    system?: string;
    /**
     * 请求数
     * Format: int64
     */
    requests?: string;
  };
  statisticTopUaSystemTrafficListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUaSystemTrafficListResponseItem"][];
  };
  statisticTopUaSystemTrafficListResponseItem: {
    /** 操作系统 */
    system?: string;
    /**
     * 流量
     * Format: int64
     */
    bytes?: string;
  };
  statisticTopUrlRequestListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUrlRequestListResponseItem"][];
  };
  statisticTopUrlRequestListResponseItem: {
    /** url */
    url?: string;
    /**
     * 请求数
     * Format: int64
     */
    requests?: string;
  };
  statisticTopUrlTrafficListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticTopUrlTrafficListResponseItem"][];
  };
  statisticTopUrlTrafficListResponseItem: {
    /** url */
    url?: string;
    /**
     * 流量
     * Format: int64
     */
    bytes?: string;
  };
  statisticTrafficListResponse: {
    list?: definitions["statisticTrafficListResponseItem"][];
  };
  statisticTrafficListResponseItem: {
    /** Format: int64 */
    time?: string;
    /**
     * 命中流量
     * Format: int64
     */
    hit_traffic?: string;
    /**
     * 回源流量
     * Format: int64
     */
    origin_traffic?: string;
  };
  statisticTrafficSummaryInfoResponse: {
    /**
     * 总流量（单位：byte）
     * Format: int64
     */
    total_bytes?: string;
    /**
     * 总请求
     * Format: int64
     */
    total_requests?: string;
    /**
     * 命中率（保留2位小数）
     * Format: float
     */
    hit_rate?: number;
    /**
     * 峰值带宽（单位：bps）
     * Format: int64
     */
    top_speed?: string;
    /**
     * 独立ip数
     * Format: int64
     */
    ips?: string;
  };
  statisticUserRegionRequestListResponse: {
    list?: definitions["statisticUserRegionRequestListResponseItem"][];
  };
  statisticUserRegionRequestListResponseItem: {
    /** 国家或地区 */
    location?: string;
    /**
     * 区域次数
     * Format: int64
     */
    requests?: string;
    /**
     * 总次数
     * Format: int64
     */
    total_requests?: string;
  };
  statisticUserRegionTrafficListResponse: {
    list?: definitions["statisticUserRegionTrafficListResponseItem"][];
  };
  statisticUserRegionTrafficListResponseItem: {
    /** 国家或地区 */
    location?: string;
    /**
     * 区域流量
     * Format: int64
     */
    bytes?: string;
    /**
     * 总流量
     * Format: int64
     */
    total_bytes?: string;
  };
  statisticWafListResponse: {
    /** Format: int64 */
    total?: string;
    list?: definitions["statisticWafListResponseItem"][];
  };
  statisticWafListResponseItem: {
    /** 时间 格式 2022-12-13 19:34:46 */
    time?: string;
    /** 操作 */
    action?: string;
    /** 国家或地区 */
    location?: string;
    /** ip地址 */
    ip?: string;
    /** 域名 */
    domain?: string;
    /** 规则名称 */
    rule_name?: string;
    /** 方法 */
    method?: string;
    /** http版本 */
    http_version?: string;
    /** 路径path */
    path?: string;
    /** 查询字符串 */
    query?: string;
  };
  statisticWafSummaryInfoResponse: {
    /**
     * 威胁数
     * Format: int64
     */
    menaces?: string;
    /**
     * 阻止数
     * Format: int64
     */
    prevents?: string;
    /**
     * 错误码请求数
     * Format: int64
     */
    codes?: string;
  };
  /**
   * 域名默认状态
   * Format: int32
   * @description - 1: 默认
   *  - 2: 非默认
   * @default 0
   * @enum {integer}
   */
  storageDomainDefaultStatus: 0 | 1 | 2;
  /**
   * 域名来源类型
   * Format: int32
   * @description - 1: 用户自定义域名
   *  - 2: 系统创建
   * @default 0
   * @enum {integer}
   */
  storageDomainSourceType: 0 | 1 | 2;
  /** 行为验证码开关配置 */
  sysconfBehavioralCaptchaSwitch: {
    /** 用户端 */
    user?: definitions["sysconfBehavioralCaptchaSwitchEnum"];
    /** 管理端 */
    manage?: definitions["sysconfBehavioralCaptchaSwitchEnum"];
  };
  /**
   * - 1: 打开
   *  - 2: 关闭
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  sysconfBehavioralCaptchaSwitchEnum: 0 | 1 | 2;
  /**
   * 产品类型
   * "类型说明 3：云存储 OSS  4：云转码 MTS 5：云分发 CDN  6：云解析 DNS 7：SSL 证书"
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  typeProductType: 0 | 3 | 4 | 5 | 6 | 7;
  userAddGroupDomainsRequest: {
    /**
     * [必填] 分组id
     * Format: int64
     */
    id: string;
    /** [必填] 域名ids */
    domain_ids?: string[];
  } & {
    ids: unknown;
  };
  userAddGroupDomainsResponse: { [key: string]: unknown };
  userAddNotificationReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    rule?: definitions["userNotificationRule"];
  };
  userAddTagReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 键
     * @example foo
     */
    key: string;
    /**
     * 值
     * @example foo
     */
    val: string;
  };
  userApiListResponse: {
    list?: definitions["userApiResponse"][];
    /** Format: int64 */
    total?: string;
  };
  userApiResponse: {
    /**
     * 证书id
     * Format: int64
     */
    id?: string;
    /**
     * // 证书选择id
     *  int64 select_id = 1;
     * 证书备注
     */
    desc?: string;
    /** 域名 */
    domain?: string;
    /** 主域名 */
    primary_domain?: string;
  };
  /** 对外接口信息 */
  userApikeyInfo: {
    /**
     * id
     * Format: int64
     */
    id?: string;
    /**
     * 状态 1-启用 2-禁用
     * Format: int32
     */
    status?: number;
    /** appid */
    appid?: string;
    /** 私钥 */
    secret?: string;
    /** 备注 */
    remark?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 操作时间
     * Format: int64
     */
    operated_at?: string;
  };
  userBatchAcquireDomainsRequest: {
    /** [必填] 域名列表 1-1000个 尽量提前去掉空字符串 */
    names: string[];
    /**
     * 分组ID
     * Format: int64
     */
    group_id?: string;
    /** [必填]TXT记录值 */
    txt_value: string;
  };
  userBatchAcquireDomainsResponse: {
    /** 失败的域名 */
    fail_domains?: string[];
    /**
     * 输入的域名数量
     * Format: int64
     */
    domain_count?: string;
    /**
     * 成功的域名数量
     * Format: int64
     */
    success_count?: string;
  };
  userBatchCreateDomainsRequest: {
    /** [必填] 域名列表 1-1000个 尽量提前去掉空字符串 */
    names: string[];
    /** 记录列表 0-1000条 */
    rrs?: definitions["userBatchCreateRrInfo"][];
  };
  userBatchCreateDomainsResponse: {
    /** 失败的域名 */
    fail_domains?: string[];
    /**
     * 输入的域名数量
     * Format: int64
     */
    domain_count?: string;
    /**
     * 成功的域名数量
     * Format: int64
     */
    success_count?: string;
    /**
     * 成功的记录数量
     * Format: int64
     */
    success_rr_count?: string;
  };
  userBatchCreateRrInfo: {
    /** [必填] 记录类型 ["A", "AAAA", "CNAME", "MX", "NS", "TXT", "CAA"] */
    type: string;
    /** [选填] 主机记录 如果要解析@.exmaple.com，主机记录要填写”@”，而不是空。 不传默认为@ */
    name?: string;
    /** [必填] 记录值 */
    value: string;
    /**
     * [必填] 缓存时间(秒) 默认:600 范围:[1~86400]
     * Format: int32
     */
    ttl: number;
  };
  userBatchCreateRrsLineRequest: {
    /**
     * 解析记录 1-1000条
     * 一行一条解析记录，格式为：域名、记录类型、主机记录、记录值，中间以空格分隔；
     * 例如：abc.com A @ 190.0.0.1
     */
    rrs: string[];
  };
  userBatchCreateRrsLineResponse: {
    /**
     * 成功数量
     * Format: int64
     */
    success_count?: string;
    /**
     * 输入内容
     * Format: int64
     */
    rr_count?: string;
    /** 失败的域名 */
    fail_domains?: string[];
  };
  /** 批量添加记录信息 请求 */
  userBatchCreateRrsRequest: {
    /** [必填] 域名列表 1-1000个 尽量提前去掉空字符串 */
    domains: string[];
    /** 记录列表 1-1000条 */
    rrs: definitions["userBatchCreateRrInfo"][];
  };
  userBatchCreateRrsResponse: {
    /**
     * 成功数量
     * Format: int64
     */
    success_count?: string;
    /** 失败的域名 */
    fail_domains?: string[];
    /**
     * 输入的域名数量
     * Format: int64
     */
    domain_count?: string;
  };
  userBatchDeleteRrsRequest: {
    /** [必填] 域名列表 1-1000个 尽量提前去掉空字符串 */
    domains: string[];
    /** 条件列表 删除域名内的所有解析记录 就传空 */
    conditions?: definitions["userBatchRrCondition"][];
    /**
     * 运算符 1.满足所有条件 2.满足任意条件  删除域名内的所有解析记录 就传0
     * Format: int32
     */
    operator?: number;
  };
  userBatchDeleteRrsResponse: {
    /**
     * 成功数量
     * Format: int64
     */
    success_count?: string;
    /** 失败的域名 */
    fail_domains?: string[];
    /**
     * 输入的域名数量
     * Format: int64
     */
    domain_count?: string;
  };
  userBatchObtainRequest: {
    /**
     * [必填]加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384)
     * Format: int32
     */
    algorithm?: number;
    /** [必填]域名列表 */
    domain_list?: string[];
  };
  userBatchObtainResponse: {
    /**
     * 添加失败个数
     * Format: int64
     */
    failed_count?: string;
  };
  userBatchRenewRequest: {
    /**
     * [必填]加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384)
     * Format: int32
     */
    algorithm?: number;
    /** [必填]证书id列表 */
    id_list?: string[];
  };
  userBatchRenewResponse: {
    /**
     * 添加失败个数
     * Format: int64
     */
    failed_count?: string;
  };
  userBatchRrCondition: {
    /** [必填] 可选字段 ["name","value"] name:主机记录等于  value:记录值等于 */
    key: string;
    /** [必填] 等号后面的值 */
    value: string;
  };
  userBatchUpdateCertificateRequest: {
    /** [必填]id列表 */
    id_list?: string[];
    /**
     * [必填]是否自动续签(1:是, 2:否)
     * Format: int32
     */
    is_renewal?: number;
  };
  userBatchUpdateCertificateResponse: { [key: string]: unknown };
  userBatchUpdateRrExpr: {
    /** [必填] 可选字段 ["name","value"] name:主机记录改为  value:记录值改为 */
    key: string;
    /** [必填] 等号后面的值 */
    value: string;
  };
  userBatchUpdateRrsRequest: {
    /** [必填] 域名列表 1-1000个 尽量提前去掉空字符串 */
    domains: string[];
    /** 条件列表 */
    conditions: definitions["userBatchRrCondition"][];
    /**
     * 运算符 1.满足所有条件 2.满足任意条件
     * Format: int32
     */
    operator: number;
    /** 表达式 */
    expr: definitions["userBatchUpdateRrExpr"];
  };
  userBatchUpdateRrsResponse: {
    /**
     * 成功数量
     * Format: int64
     */
    success_count?: string;
    /**
     * 失败数量
     * Format: int64
     */
    fail_count?: string;
    /** 失败的域名 */
    fail_domains?: string[];
    /**
     * 输入的域名数量
     * Format: int64
     */
    domain_count?: string;
  };
  userBucketBody: {
    /** 空间名 */
    name?: string;
    /** 访问控制,private->私有,public-read->公开读 */
    acl?: string;
    /** 备注 */
    remark?: string;
    /**
     * 区域id
     * Format: int64
     */
    region_id?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 用户id
     * Format: int64
     */
    user_id?: string;
    /**
     * 空间id
     * Format: int64
     */
    id?: string;
    /**
     * 存储量(byte)
     * Format: int64
     */
    storage_bytes?: string;
    /**
     * 对象数
     * Format: int32
     */
    storage_num?: number;
    /**
     * 客户端缓存max_age
     * Format: int32
     */
    max_age?: number;
  };
  userBucketMetricVal: {
    /**
     * 空间id
     * Format: int64
     */
    bucket_id?: string;
    /**
     * 值,流量单位byte,个数单位个
     * Format: int64
     */
    val?: string;
    /** 区域名称 */
    bucket_name?: string;
  };
  userBucketOverviewResp: {
    /** 空间流量趋势 */
    bucket_byte_trend?: definitions["userMetricMethodVal"][];
    /** 存储趋势 */
    storage_size_trend?: definitions["userMetricVal"][];
    /** 文件请求趋势 */
    file_req_trend?: definitions["userMetricMethodVal"][];
    /** 今日昨日统计 */
    day_static?: definitions["userDayStaticBody"];
    /** 当月上月统计 */
    mon_static?: definitions["userMonStaticBody"];
  };
  userBucketUsedSummaryResponse: {
    /**
     * 总可使用存储空间
     * Format: int64
     */
    max_space_bytes?: string;
    /** 总可使用空间单位 */
    max_space_bytes_unit?: definitions["OssStorageSpaceUnit"];
    /**
     * 已使用空间 单位 byte
     * Format: int64
     */
    used_space_bytes?: string;
    /**
     * 最大空间数 单位:个
     * Format: int64
     */
    max_total_bucket?: string;
    /**
     * 已使用空间数
     * Format: int64
     */
    used_bucket?: string;
  };
  userCancelObtainRequest: {
    /** [必填]id列表 */
    id_list?: string[];
  };
  userCancelObtainResponse: { [key: string]: unknown };
  /**
   * CertStatus 证书状态
   * Format: int32
   * @description - 1: 有效
   *  - 2: 即将到期
   *  - 3: 未申请
   *  - 4: 过期
   * @default 0
   * @enum {integer}
   */
  userCertStatus: 0 | 1 | 2 | 3 | 4;
  /**
   * - 0: 未知
   *  - 1: RSA
   *  - 2: ECDSA
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  userCertificateAlgorithm: 0 | 1 | 2;
  userCertificateFileResponse: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /**
     * 证书类型(1:边缘证书, 2:源服务器证书)
     * Format: int32
     */
    cert_type?: number;
    /**
     * 证书来源(1:api, 2:自定义上传)
     * Format: int32
     */
    source?: number;
    /** 证书域名 */
    domain?: string;
    /** 证书文件 */
    certificate?: string;
    /** 私钥 */
    private_key?: string;
    /** 品牌 */
    brand?: string;
    /**
     * 过期时间
     * Format: int64
     */
    expire_at?: string;
    /**
     * 有效期
     * Format: int64
     */
    valid_day?: string;
    /**
     * 证书ApiID
     * Format: int64
     */
    api_id?: string;
    /**
     * 证书选择id
     * Format: int64
     */
    select_id?: string;
  };
  userCertificateListResponse: {
    list?: definitions["v1cdnclientuserCertificateResponse"][];
    /** Format: int64 */
    total?: string;
  };
  /**
   * - 0: 未知
   *  - 1: 正常
   *  - 2: 即将过期
   *  - 3: 过期
   * Format: int32
   * @default 0
   * @enum {integer}
   */
  userCertificateStatus: 0 | 1 | 2 | 3;
  userCheckCaptchaRequest: {
    /**
     * [必填] 账号
     * @example 12345678@qq.com
     */
    account: string;
    /**
     * [必填]场景 1:用户注册 2:用户登录  3:用户忘记密码 4:管理员登录
     * Format: int32
     * @example 1
     */
    scene: number;
    /**
     * 坐标
     * @example 12,12,12,12,12,12
     */
    dots: string;
    /** key */
    key: string;
  };
  userCheckCaptchaResponse: { [key: string]: unknown };
  userClearCorsResp: { [key: string]: unknown };
  userClearSiteCacheResponse: { [key: string]: unknown };
  userCollectDosageResponse: {
    /** 视频清晰度时长 */
    video_resolution_list?: definitions["userVideoResolution"][];
    /** 视频转码用量 */
    video_dosage_list?: definitions["userVideoDosage"][];
    /**
     * 截图数量
     * Format: int64
     */
    count?: string;
    /** 截图用量 */
    screenshot_dosage_list?: definitions["userScreenshotDosage"][];
  };
  userCompleteMultipartUploadReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 文件名
     * @example foo.jpg
     */
    key: string;
    /**
     * 上传id
     * @example 2~F2FJDhZSF0GjBB3IugcVJ9u0xNK_LP4
     */
    upload_id: string;
    /**
     * 上传了的部分
     * @example [
     *   {
     *     "etag": "02d67674a9a02df0c70ee272bfabd17a",
     *     "part_number": 1
     *   }
     * ]
     */
    parts?: definitions["userUploadedPart"][];
    /**
     * 是否覆盖
     * @example false
     */
    overwrite?: boolean;
  };
  userCompleteMultipartUploadResp: {
    /** 文件名 */
    key?: string;
    /** 文件etag */
    etag?: string;
  };
  userConfigInfo: {
    /**
     * 添加域名时批量添加记录 1.开启 2关闭
     * Format: int32
     */
    domain_add_show_rrs_switch?: number;
    /** 默认批量添加记录类型 */
    default_rrs?: definitions["userDefaultRrInfo"][];
  };
  userCorsRule: {
    /**
     * 允许来源
     * @example [
     *   "*"
     * ]
     */
    allowed_origins?: string[];
    /**
     * 允许方法
     * @example [
     *   "GET"
     * ]
     */
    allowed_methods?: string[];
    /**
     * 允许请求头
     * @example [
     *   "Referer"
     * ]
     */
    allowed_headers?: string[];
    /**
     * 暴露响应头
     * @example [
     *   "Referer"
     * ]
     */
    expose_headers?: string[];
    /**
     * 缓存时间(秒)
     * Format: int32
     * @example 1
     */
    max_age?: number;
  };
  /** 创建站点参数 */
  userCreatSiteRequest: {
    /** 域名 */
    domain?: string;
    /** 源站配置 */
    origin_configure?: definitions["siteOrigin"];
    /** 解析模式 1.自动解析 2.手动解析 */
    resolve_mode?: definitions["userSiteResolveMode"];
  };
  userCreatSiteResponse: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
  };
  userCreatSiteWafRuleResponse: {
    /** Format: int64 */
    rule_id?: string;
  };
  /** 添加apikey信息 请求 */
  userCreateApikeyRequest: {
    /** [选填] 备注信息，30字以内 */
    remark?: string;
  };
  /** 添加apikey信息 回复 */
  userCreateApikeyResponse: {
    info?: definitions["userApikeyInfo"];
  };
  userCreateBucketDomainReq: {
    /**
     * 域名
     * @example baidu.com
     */
    name: string;
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
  };
  userCreateBucketDomainResp: {
    /**
     * 域名id
     * Format: int64
     */
    id?: string;
    /** cname */
    cname?: string;
  };
  userCreateBucketReq: {
    /**
     * 用户输入的空间名称,^[a-z0-9][-a-z0-9]{1,20}[a-z0-9]$
     * @example foo
     */
    name: string;
    /**
     * 选择的区域id
     * Format: int64
     * @example 187865794876019870
     */
    region_id: string;
    /**
     * 访问控制,private->私有,public-read->公开读
     * @example private
     */
    acl: string;
  };
  userCreateBucketResp: {
    /** 空间名 */
    name?: string;
    /**
     * 空间id
     * Format: int64
     */
    id?: string;
  };
  /** 创建验证码请求 */
  userCreateCaptchaRequest: {
    /**
     * [必填] 账号 目前只支持邮箱 (1.邮箱注册,2.绑定邮箱,3.修改邮箱(老邮箱),4.修改邮箱(新邮箱)，5.重置密码)
     * @example 12345678@qq.com
     */
    account: string;
    /**
     * [必填]场景
     * Format: int32
     * @example 1
     */
    scene: number;
  };
  /** 创建验证码回复 */
  userCreateCaptchaResponse: {
    /** 脱敏后的邮箱 */
    email?: string;
  };
  /** 创建域名分组信息 请求 */
  userCreateDomainGroupRequest: {
    /** [必填] 分组名称 1-20个字符 */
    name: string;
    /** [选填] 备注 20字以内 */
    remark?: string;
    /** [选填] 域名ids */
    domain_ids?: string[];
  };
  /** 创建域名分组信息 回复 */
  userCreateDomainGroupResponse: { [key: string]: unknown };
  /** 添加域名信息 请求 */
  userCreateDomainRequest: {
    /** [必填] 域名 */
    name: string;
  };
  /** 添加域名信息 回复 */
  userCreateDomainResponse: {
    info?: definitions["userDomainInfo"];
  };
  userCreateDomainsRequest: {
    /** [必填] 域名列表 1-1000个 尽量提前去掉空字符串 */
    names: string[];
    /** 同时为新域名添加 @ 和 WWW 的 A 记录 记录值 可以传可以不传 */
    rr_value?: string;
  };
  userCreateDomainsResponse: {
    /** 失败的域名 */
    fail_domains?: string[];
    /**
     * 输入的域名数量
     * Format: int64
     */
    domain_count?: string;
    /**
     * 成功的域名数量
     * Format: int64
     */
    success_count?: string;
    /**
     * 成功的记录数量
     * Format: int64
     */
    success_rr_count?: string;
  };
  userCreateMultipartUploadReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 文件名
     * @example foo.jpg
     */
    key: string;
    /**
     * 是否覆盖
     * @example false
     */
    overwrite?: boolean;
    /**
     * 文件大小,单位byte
     * Format: int64
     * @example 546800
     */
    size: string;
  };
  userCreateMultipartUploadResp: {
    /** 文件名 */
    key?: string;
    /** 上传id */
    upload_id?: string;
  };
  userCreateOriginCertificateResponse: { [key: string]: unknown };
  userCreateQueueRequest: {
    /**
     * 名称
     * @example 111
     */
    name: string;
  };
  /** 添加记录信息 请求 */
  userCreateRrRequest: {
    /**
     * [必填] 站点id
     * Format: int64
     */
    domain_id: string;
    /** [必填] 记录类型 ["A", "AAAA", "CNAME", "MX", "NS", "TXT", "CAA"] */
    type: string;
    /** [选填] 主机记录 如果要解析@.exmaple.com，主机记录要填写”@”，而不是空 默认为@。 */
    name?: string;
    /** [必填] 记录值 */
    value: string;
    /**
     * [必填] 缓存时间(秒) 默认:600 范围:[1~86400]
     * Format: int32
     */
    ttl: number;
    /**
     * [选填] MX记录的优先级，取值范围：[1,50]，记录类型为MX记录时，此参数必需，MX 优先级的数值越低，优先级别就越高。缺省时为10
     * Format: int32
     */
    priority?: number;
    /** [选填] 备注信息，200字以内 */
    remark?: string;
  };
  /** 添加记录信息 回复 */
  userCreateRrResponse: {
    info?: definitions["userRrInfo"];
  };
  userCreateSitePageRuleResponse: {
    /** Format: int64 */
    rule_id?: string;
  };
  userCreateSiteTransFormRuleResponse: {
    /** Format: int64 */
    rule_id?: string;
  };
  userCreateTaskRequest: {
    /**
     * 任务名
     * @example 11
     */
    name: string;
    /**
     * 资源名或路径
     * @example 11
     */
    file_name: string;
    /**
     * 区域ID
     * Format: int64
     * @example 11
     */
    region_id: string;
    /**
     * 空间ID
     * Format: int64
     * @example 11
     */
    bucket_id?: string;
    /**
     * 工作流ID （如果传工作流ID，就不能填写队列ID、工作流名称、工作流配置等参数）
     * Format: int64
     */
    workflow_id?: string;
    /** 工作流名称 */
    workflow_name?: string;
    /**
     * 队列ID
     * Format: int64
     */
    queue_id?: string;
    /** 工作流配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
  };
  userCreateTaskVerifyResponse: {
    /** 权益验证是否通过 */
    success?: boolean;
  };
  userCreateTriggerRequest: {
    /** 名称 */
    name?: string;
    /**
     * 域名ID
     * Format: int64
     * @example 16254646543251324
     */
    region_id: string;
    /**
     * 空间ID
     * Format: int64
     * @example 16254646543251324
     */
    bucket_id: string;
    /**
     * 匹配规则，1：全匹配，2：前缀，3：后缀
     * Format: int32
     * @example 1
     */
    match_rule: number;
    /** 匹配字段 */
    match_field?: string;
    /**
     * 状态 1：开，2：关
     * Format: int32
     * @example 1
     */
    status: number;
    /**
     * 队列ID
     * Format: int64
     */
    queue_id?: string;
    /**
     * 工作流ID
     * Format: int64
     */
    workflow_id?: string;
    /** 工作流名称 */
    workflow_name?: string;
    /** 工作流配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
  };
  userCreateUserVisitEventRequest: {
    /**
     * [必传]（1:官网、2：控制台、3：云存储 OSS  4：云转码 MTS 5：云分发 CDN  6：云解析 DNS 7：SSL 证书）
     * Format: int32
     * @example 1
     */
    source: number;
    /**
     * 页面标志路径
     * @example xxxxxxxxxxx
     */
    page_path?: string;
    /**
     * [必传] 用户id 如果是已登录用户，后端会取该用户的id 否则依据前端传的
     * Format: int64
     * @example 1111111111111
     */
    uid: string;
  };
  userCreateUserVisitEventResponse: { [key: string]: unknown };
  userCreateWorkerOrderRequest: {
    /**
     * 工单类型
     * Format: int64
     */
    type?: string;
    /** 工单标题 1-100个字符 */
    title?: string;
    /** 工单描述 最大500个字符 */
    describe?: string;
    /** 附件图片地址 多个图片逗号分隔 */
    picture_path?: string;
    /**
     * 产品id
     * Format: int64
     */
    product_id?: string;
  };
  userCreateWorkerOrderResponse: { [key: string]: unknown };
  userCreateWorkflowRequest: {
    /** 名称 */
    name?: string;
    /**
     * 域名ID
     * Format: int64
     * @example 16254646543251324
     */
    region_id: string;
    /**
     * 队列ID
     * Format: int64
     * @example 16254646543251324
     */
    queue_id: string;
    /** 工作流配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
  };
  userDayStaticBody: {
    /**
     * 今日存储量,byte
     * Format: int64
     */
    cur_day_size?: string;
    /**
     * 昨日存储量,byte
     * Format: int64
     */
    last_day_size?: string;
    /**
     * 今日文件数
     * Format: int64
     */
    cur_day_num?: string;
    /**
     * 昨日文件数
     * Format: int64
     */
    last_day_num?: string;
  };
  userDefaultRrInfo: {
    /** [必填] 记录类型 ["A", "AAAA", "CNAME", "MX", "NS", "TXT", "CAA"] */
    type?: string;
    /** [选填] 主机记录 如果要解析@.exmaple.com，主机记录要填写”@”，而不是空。 不传默认为@ */
    name?: string;
    /**
     * [必填] 缓存时间(秒) 默认:600 范围:[1~86400]
     * Format: int32
     */
    ttl?: number;
  };
  userDelNotificationResp: { [key: string]: unknown };
  userDelTagResp: { [key: string]: unknown };
  /** 删除apikey请求 */
  userDeleteApikeyRequest: {
    /**
     * [必填]  apikey id
     * Format: int64
     */
    id: string;
  };
  /** 删除apikey回复 */
  userDeleteApikeyResponse: { [key: string]: unknown };
  userDeleteBucketDomainReq: {
    /**
     * 待删除的域名id
     * @example [
     *   187865794876019870
     * ]
     */
    ids?: string[];
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
  };
  userDeleteBucketDomainResp: { [key: string]: unknown };
  userDeleteBucketResp: { [key: string]: unknown };
  userDeleteCertificateRequest: {
    /** [必填]id列表 */
    id_list?: string[];
  };
  userDeleteCertificateResponse: { [key: string]: unknown };
  /** 删除单个域名分组 请求 */
  userDeleteDomainGroupRequest: {
    /**
     * [必填] 域名分组id
     * Format: int64
     */
    id: string;
  };
  /** 删除单个域名分组 回复 */
  userDeleteDomainGroupResponse: { [key: string]: unknown };
  /** 删除多个域名分组 请求 */
  userDeleteDomainGroupsRequest: {
    /** [必填] 域名分组ids */
    ids: string[];
  };
  /** 删除多个域名分组 回复 */
  userDeleteDomainGroupsResponse: { [key: string]: unknown };
  /** 删除域名请求 */
  userDeleteDomainRequest: {
    /**
     * [必填]  域名id
     * Format: int64
     */
    id: string;
  };
  /** 删除域名回复 */
  userDeleteDomainResponse: { [key: string]: unknown };
  /** 删除记录请求 */
  userDeleteRrRequest: {
    /**
     * [必填] 记录id
     * Format: int64
     */
    id: string;
  };
  /** 删除记录回复 */
  userDeleteRrResponse: { [key: string]: unknown };
  userDeleteRrsRequest: {
    /** [必填] 记录id 1-1000条 */
    ids: string[];
    /**
     * [可选] 域名id
     * Format: int64
     */
    domain_id?: string;
  };
  userDeleteRrsResponse: { [key: string]: unknown };
  userDeleteSitePageRuleResponse: { [key: string]: unknown };
  userDeleteSiteResponse: { [key: string]: unknown };
  userDeleteSiteWafRuleResponse: { [key: string]: unknown };
  userDeleteTransFormRuleResponse: { [key: string]: unknown };
  userDnsServiceDetectResponse: { [key: string]: unknown };
  userDnsVerifyResponse: { [key: string]: unknown };
  /** 域名分组信息 */
  userDomainGroupInfo: {
    /**
     * 分组id
     * Format: int64
     * @example 111100000111
     */
    id?: string;
    /**
     * 分组名称
     * @example 分组1
     */
    name?: string;
    /**
     * 备注
     * @example 备注信息2
     */
    remark?: string;
    /**
     * 创建日期
     * Format: int64
     */
    created_at?: string;
    /**
     * 关联域名数量
     * Format: int64
     */
    domain_count?: string;
  };
  /** 域名详情 */
  userDomainInfo: {
    /**
     * 域名id
     * Format: int64
     */
    id?: string;
    /**
     * 域名分组id
     * Format: int64
     */
    group_id?: string;
    /** 域名分组名称 */
    group_name?: string;
    /** 域名 */
    name?: string;
    /**
     * ns服务器状态 1-正常 2-异常
     * Format: int32
     */
    ns_status?: number;
    /**
     * 记录数
     * Format: int64
     */
    rr_count?: string;
    /** 备注 */
    remark?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 操作时间
     * Format: int64
     */
    operated_at?: string;
    /** 分配的ns服务器 */
    assign_ns_list?: string[];
    /** 当前ns服务器 */
    current_ns_list?: string[];
  };
  userDomainListVerifyRequest: {
    /** [必填]域名列表 */
    domain_list?: string[];
  };
  userDomainListVerifyResponse: {
    /** 异常列表 */
    domain_list?: string[];
  };
  userDownloadCertificateRequest: {
    /** [必填]id列表 */
    id_list?: string[];
  };
  userDownloadCertificateResponse: {
    /**
     * zip文件
     * Format: byte
     */
    zip?: string;
  };
  userDownloadResp: {
    /** Format: byte */
    body?: string;
  };
  userEditSslReq: {
    /**
     * 域名id
     * Format: int64
     * @example 187865794876019870
     */
    id: string;
    /**
     * 证书id,0为取消绑定
     * Format: int64
     * @example 187865794876019870
     */
    ssl_id: string;
  };
  userEditSslResp: { [key: string]: unknown };
  userEndWorkerOrderRequest: {
    /** 工单id */
    id?: string[];
  };
  userEndWorkerOrderResponse: { [key: string]: unknown };
  userFontResponse: {
    list?: definitions["FontResponsefont"][];
  };
  userGetAcquireDomainTxtResponse: {
    /** 主机记录 */
    name?: string;
    /** 记录值 */
    value?: string;
  };
  userGetAlarmResponse: {
    /** 列表 */
    list?: definitions["clientuserAlarmItem"][];
  };
  userGetApikeyResponse: {
    info?: definitions["userApikeyInfo"];
  };
  userGetCaptchaResponse: {
    /** 图片 */
    image?: string;
    /** 提示文字图片 */
    thumbnail?: string;
    /** key */
    key?: string;
  };
  userGetCertificateFileResponse: {
    /** 证书私钥 */
    private_key?: string;
    /** 证书内容 */
    certificate?: string;
  };
  userGetCorsResp: {
    list?: definitions["userCorsRule"][];
  };
  /** 获取单个域名分组信息 回复 */
  userGetDomainGroupResponse: {
    info?: definitions["userDomainGroupInfo"];
  };
  userGetDomainNsStatusResponse: {
    /** 域名 */
    name?: string;
    /**
     * ns服务器状态 1-正常 2-异常 [1:已转入 2:没转入]
     * Format: int32
     */
    ns_status?: number;
    /** 当前用户该域名是否存在 */
    domain_existed?: boolean;
  };
  userGetDomainResponse: {
    info?: definitions["userDomainInfo"];
  };
  userGetEdgeCertificateApiFileResponse: {
    /** [必填]证书 */
    certificate?: string;
    /** [必填]私钥 */
    private_key?: string;
  };
  userGetInfoResp: {
    /** 空间名 */
    name?: string;
    /** 访问控制,private->私有,public-read->公开读 */
    acl?: string;
    /** 备注 */
    remark?: string;
    /**
     * 区域id
     * Format: int64
     */
    region_id?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 用户id
     * Format: int64
     */
    user_id?: string;
    /**
     * id
     * Format: int64
     */
    id?: string;
    /**
     * 客户端缓存max_age
     * Format: int32
     */
    max_age?: number;
    /** 生命周期规则 */
    lifecycle_rules?: definitions["userLifecycleRule"][];
    /** 跨域规则 */
    cors_rules?: definitions["userCorsRule"][];
    /** 通知规则 */
    notify_rules?: definitions["userNotificationRule"][];
    /** 标签 */
    tags?: definitions["clientuserTag"][];
    /** 防盗链 */
    referer?: definitions["userGetRefererResp"];
  };
  userGetLifecycleResp: {
    list?: definitions["userLifecycleRule"][];
  };
  userGetMetadataResp: {
    list?: { [key: string]: string };
  };
  userGetNotificationResp: {
    list?: definitions["userNotificationRule"][];
  };
  userGetRefererResp: {
    /** list */
    list?: string[];
    /** 是否启用 */
    enable?: boolean;
    /** 是否是白名单 */
    is_white_list?: boolean;
    /** 是否允许空referer */
    allow_empty?: boolean;
  };
  userGetResourceOverviewResponse: {
    oss?: definitions["productUserResourceOverviewOss"];
    ssl?: definitions["productUserResourceOverviewSsl"];
    dns?: definitions["productUserResourceOverviewDns"];
    mts?: definitions["productUserResourceOverviewMts"];
    cdn?: definitions["productUserResourceOverviewCdn"];
  };
  userGetRrResponse: {
    info?: definitions["userRrInfo"];
  };
  userGetSiteAntiStealingLinkResponse: {
    /** Format: int64 */
    site_id?: string;
    anti_theft_chain?: definitions["siteAntiStealingLink"];
  };
  userGetSiteCacheConfigResponse: {
    /** Format: int64 */
    site_id?: string;
    cache_config?: definitions["siteCacheConfig"];
  };
  userGetSiteErrorPageResponse: {
    /** Format: int64 */
    site_id?: string;
    error_page?: definitions["siteErrorPage"];
  };
  userGetSiteNetworkConfigResponse: {
    /** Format: int64 */
    site_id?: string;
    network_config?: definitions["siteNetworkConfig"];
  };
  userGetSiteOriginResponse: {
    /**
     * 域名
     * Format: int64
     */
    site_id?: string;
    /** 源站 */
    origin_configure?: definitions["siteOrigin"];
    /** 是否跟随源站 1 是 2 否 */
    follow_origin?: definitions["globalRunState"];
  };
  userGetSitePageRuleResponse: {
    rule?: definitions["sitePageRuleInfo"];
  };
  userGetSiteResolveStatusResponse: {
    /** 解析状态 [1:已解析, 2:未解析] */
    resolve_status?: definitions["globalRunState"];
  };
  userGetSiteResponse: {
    /**
     * 站点id
     * Format: int64
     */
    id?: string;
    /** 域名 */
    domain?: string;
    /**
     * 用户账号
     *  string user_name = 3;
     *  所属区域
     *  optional string region_name = 4;
     *  CNAME域名
     */
    cname_domain?: string;
    /**
     * 证书状态
     *  CertStatus cert_status = 6;
     * 站点状态，1有效，2暂停服务
     */
    status?: definitions["globalRunState"];
    /**
     * 源站数
     *  int32  origin_site_num = 9;
     *  带宽速度限制
     *  optional corepb.site.SiteSpeedLimit rate_limit = 10;
     * 修改时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /** 附加消息，区域==>region_name,带宽速度限制,单位KB==>rate_limit:corepb.site.SiteSpeedLimit */
    attach?: { [key: string]: string };
  };
  userGetSiteSpeedOptimizeResponse: {
    /** Format: int64 */
    site_id?: string;
    speed_optimization?: definitions["corepbsiteSpeedOptimization"];
  };
  userGetSiteSslConfigResponse: {
    /** Format: int64 */
    site_id?: string;
    ssl_config?: definitions["siteSslConfig"];
  };
  userGetSiteWafRuleResponse: {
    rule?: definitions["siteSiteWafRule"];
  };
  userGetTagResp: {
    list?: definitions["clientuserTag"][];
  };
  userGetTransFormRuleResponse: {
    rule?: definitions["siteSiteTransFormRule"];
  };
  userGetUserInfoResponse: {
    /** 用户信息 */
    info?: definitions["userUserInfo"];
  };
  userGetWorkerOrderTypeResponse: {
    list?: definitions["userGetWorkerOrderTypeResponseItem"][];
  };
  userGetWorkerOrderTypeResponseItem: {
    name?: string;
    /** Format: int64 */
    product_id?: string;
    /**
     * 排序字段
     * Format: int32
     */
    sort?: number;
    /**
     * 分类id
     * Format: int64
     */
    id?: string;
  };
  userInflowTrendResp: {
    /**
     * 总流量(byte)
     * Format: int64
     */
    total_byte?: string;
    /**
     * 平均流量(byte)
     * Format: int64
     */
    avg_byte?: string;
    /**
     * 最大流量(byte)
     * Format: int64
     */
    max_byte?: string;
    /**
     * 最大流量的空间id
     * Format: int64
     */
    max_bucket_id?: string;
    /** 最大流量的空间名 */
    max_bucket_name?: string;
    trend?: definitions["userOutflowTrendBody"][];
  };
  userInfoWorkerOrderResponse: {
    /**
     * 工单id
     * Format: int64
     */
    id?: string;
    /** 工单标题 */
    title?: string;
    /**
     * 工单类型id
     * Format: int64
     */
    type?: string;
    /** 附件图片信息 */
    picture_path?: string;
    /**
     * 反馈时间
     * Format: int64
     */
    create_time?: string;
    /**
     * 工单状态 1:处理中 2:已结单
     * Format: int32
     */
    state?: number;
    /** Format: int32 */
    circulationState?: number;
    /** 问题描述 */
    describe?: string;
    /** 产品名称 */
    product_name?: string;
    /** 工单类型名称 */
    type_name?: string;
  };
  userLifecycleRule: {
    /**
     * 规则名
     * @example name1
     */
    name: string;
    /**
     * 前缀，空->则表示对整个空间生效
     * @example foo
     */
    prefix?: string;
    /**
     * 创建时间,不需要传入
     * Format: int64
     */
    created_at?: string;
    /**
     * 删除文件的期限天数, 1 < x < 999999999
     * Format: int32
     * @example 1
     */
    expire_days: number;
  };
  /** 获取apikey列表 回复 */
  userListApikeyResponse: {
    /** apikey列表 */
    list?: definitions["userApikeyInfo"][];
    /**
     * 总条数
     * Format: int64
     */
    total?: string;
  };
  userListCertificateResponse: {
    /** 列表 */
    list?: definitions["v1sslclientuserCertificateResponse"][];
    /**
     * 总数
     * Format: int64
     */
    total?: string;
  };
  /** 获取域名分组列表回复 */
  userListDomainGroupResponse: {
    list?: definitions["userDomainGroupInfo"][];
    /** Format: int64 */
    total?: string;
  };
  /** 获取域名列表 回复 */
  userListDomainResponse: {
    /** 域名列表 */
    list?: definitions["userDomainInfo"][];
    /**
     * 总条数
     * Format: int64
     */
    total?: string;
  };
  userListObjResp: {
    marker?: string;
    list?: definitions["userObjBody"][];
  };
  userListObtainResponse: {
    /** 列表 */
    list?: definitions["userObtainResponse"][];
    /**
     * 总数
     * Format: int64
     */
    total?: string;
  };
  userListRegionResp: {
    list?: definitions["userRegionBody"][];
  };
  userListResp: {
    /**
     * 总条数
     * Format: int64
     */
    total?: string;
    /** 内容 */
    list?: definitions["userBucketBody"][];
  };
  /** 获取记录列表 回复 */
  userListRrResponse: {
    /** 记录列表 */
    list?: definitions["userRrInfo"][];
    /**
     * 总条数
     * Format: int64
     */
    total?: string;
  };
  userListSiteManagedRuleResponse: {
    list?: definitions["userSiteManagedRule"][];
    /** Format: int64 */
    total?: string;
  };
  userListSitePageRuleResponse: {
    list?: definitions["sitePageRuleInfo"][];
    /** Format: int64 */
    total?: string;
  };
  userListSiteResponse: {
    list?: definitions["userSiteInfo"][];
    /**
     * 总条数
     * Format: int64
     */
    total?: string;
  };
  userListSiteTransFormRuleResponse: {
    list?: definitions["siteSiteTransFormRule"][];
    /** Format: int64 */
    total?: string;
  };
  userListSiteWafRuleResponse: {
    list?: definitions["siteSiteWafRule"][];
    /** Format: int64 */
    total?: string;
  };
  userListSslBody: {
    /**
     * 证书id
     * Format: int64
     */
    id?: string;
    /**
     * 证书过期时间
     * Format: int64
     */
    expiration_time?: string;
    /**
     * 证书签发时间
     * Format: int64
     */
    issue_time?: string;
    /** 证书域名 */
    domain?: string;
    /** 证书主域名 */
    primary_domain?: string;
    /** 证书描述 */
    desc?: string;
    /**
     * 证书状态,2->使用中,3->已到期,4->已吊销
     * Format: int32
     */
    status?: number;
  };
  userListSslReq: {
    /**
     * 用户id
     * Format: int64
     * @example 187865794876019870
     */
    user_id: string;
    /**
     * 域名id
     * Format: int64
     * @example 187865794876019870
     */
    domain_id: string;
  };
  userListSslResp: {
    list?: definitions["userListSslBody"][];
  };
  userListUnderBucketBody: {
    /** cname */
    cname?: string;
    /** 域名 */
    name?: string;
    /**
     * id
     * Format: int64
     */
    id?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 证书id
     * Format: int64
     */
    ssl_id?: string;
    /**
     * 证书状态,1->未绑定,2->使用中,3->已到期,4->已吊销,5->已删除,6->已删除(未到期),7->已删除(已到期)
     * Format: int32
     */
    ssl_status?: number;
    /** 是否为默认域名 1:是 2:否 */
    is_default?: definitions["storageDomainDefaultStatus"];
    /** 域名来源 1:用户自定义域名 2;系统创建 */
    source_type?: definitions["storageDomainSourceType"];
  };
  userListUnderBucketReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 起始条数
     * Format: int32
     * @example 10
     */
    offset?: number;
    /**
     * 起始条数
     * Format: int32
     * @example 10
     */
    limit: number;
    /** 域名来源类型 */
    source_type?: definitions["storageDomainSourceType"];
  };
  userListUnderBucketResp: {
    /** Format: int64 */
    total?: string;
    list?: definitions["userListUnderBucketBody"][];
  };
  userListUserLoginRecordResponse: {
    /** 登录记录列表 */
    list?: definitions["userUserLoginRecordInfo"][];
    /**
     * 总条数
     * Format: int64
     */
    total?: string;
  };
  userListWorkerOrderDetailsResponse: {
    list?: definitions["userListWorkerOrderDetailsResponseItem"][];
    /** Format: int64 */
    total?: string;
  };
  userListWorkerOrderDetailsResponseItem: {
    /** Format: int64 */
    user_id?: string;
    /**
     * 用户类型 1:普通用户 2:管理员
     * Format: int32
     */
    user_role?: number;
    message?: string;
    /**
     * 消息类型 1:文字 2:图片
     * Format: int32
     */
    message_type?: number;
    /**
     * 读取状态 1:已读 2:未读
     * Format: int32
     */
    read_status?: number;
    /** Format: int64 */
    id?: string;
    /** Format: int32 */
    create_time?: number;
  };
  userListWorkerOrderResponse: {
    list?: definitions["userListWorkerOrderResponseItem"][];
    /** Format: int64 */
    total?: string;
  };
  userListWorkerOrderResponseItem: {
    /** Format: int64 */
    id?: string;
    title?: string;
    /** Format: int64 */
    type?: string;
    picture_path?: string;
    /** Format: int64 */
    create_time?: string;
    /** Format: int32 */
    state?: number;
    /**
     * 回复状态  1:待回复 2:已回复
     * Format: int32
     */
    reply_status?: number;
    product_name?: string;
    type_name?: string;
    /**
     * 是否有新消息 1:有 2:无
     * Format: int32
     */
    user_has_new_reply?: number;
  };
  userMetricMethodVal: {
    /**
     * 时间戳
     * Format: int64
     */
    metric?: string;
    /**
     * get值,流量单位byte,个数单位个
     * Format: int64
     */
    get_val?: string;
    /**
     * put值,流量单位byte,个数单位个
     * Format: int64
     */
    put_val?: string;
  };
  userMetricVal: {
    /**
     * 时间戳
     * Format: int64
     */
    metric?: string;
    /**
     * 值,流量单位byte,个数单位个
     * Format: int64
     */
    val?: string;
  };
  userMkDirReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 目录名称,可以包含多级目录,但是不允许连续的.和/
     * @example foo
     */
    key: string;
  };
  userMkDirResp: {
    etag?: string;
  };
  userModifyNotificationReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    rule?: definitions["userNotificationRule"];
  };
  userModifyNotificationResp: { [key: string]: unknown };
  userModifyTagReq: {
    /**
     * 标签
     * @example [
     *   {
     *     "key": "foo",
     *     "val": "foo",
     *     "user_id": 12345
     *   }
     * ]
     */
    list?: definitions["clientuserTag"][];
    /**
     * 空间id
     * Format: int64
     */
    bucket_id?: string;
  };
  userModifyTagResp: { [key: string]: unknown };
  userMonStaticBody: {
    /**
     * 当月get文件请求数
     * Format: int64
     */
    cur_mon_get_num?: string;
    /**
     * 当月put文件请求数
     * Format: int64
     */
    cur_mon_put_num?: string;
    /**
     * 上月get文件请求数
     * Format: int64
     */
    last_mon_get_num?: string;
    /**
     * 上月get文件请求数
     * Format: int64
     */
    last_mon_put_num?: string;
    /**
     * 当月get文件请求流量,byte
     * Format: int64
     */
    cur_mon_get_size?: string;
    /**
     * 当月put文件请求流量,byte
     * Format: int64
     */
    cur_mon_put_size?: string;
    /**
     * 上月get文件请求流量,byte
     * Format: int64
     */
    last_mon_get_size?: string;
    /**
     * 上月put文件请求流量,byte
     * Format: int64
     */
    last_mon_put_size?: string;
  };
  userNotificationRule: {
    /**
     * 通知规则id,不需要传入
     * Format: int64
     */
    id?: string;
    /**
     * 通知规则名
     * @example foo
     */
    name: string;
    /**
     * 作用前缀
     * @example foo
     */
    prefix?: string;
    /**
     * 作用后缀
     * @example jpg
     */
    suffix?: string;
    /**
     * 事件,可选项为put->简单上传、delete->删除文件、multipart->分片上传完成
     * @example [
     *   "put"
     * ]
     */
    events?: string[];
    /**
     * 回调地址
     * @example [
     *   "http://www.baidu.com"
     * ]
     */
    callback_urls?: string[];
  };
  userObjBody: {
    /** 文件名 */
    key?: string;
    /** 文件类型 */
    content_type?: string;
    /** 文件etag */
    etag?: string;
    /** 存储类型 */
    storage_class?: string;
    /**
     * 文件大小,单位byte
     * Format: int64
     */
    size?: string;
    /**
     * 最近修改时间
     * Format: int64
     */
    last_modified?: string;
    /** 是否是目录 */
    is_dir?: boolean;
  };
  userObjReqTrendResp: {
    /**
     * get请求总数
     * Format: int64
     */
    total_get_num?: string;
    /**
     * 平均get请求数
     * Format: int64
     */
    avg_get_num?: string;
    /**
     * put请求总数
     * Format: int64
     */
    total_put_num?: string;
    /**
     * 平均put请求数
     * Format: int64
     */
    avg_put_num?: string;
    /** 请求趋势 */
    trend?: definitions["userMetricMethodVal"][];
  };
  userObtainCertPassedDNSResponse: { [key: string]: unknown };
  userObtainCertRequest: {
    /** [必填]证书备注名 */
    desc?: string;
    /**
     * [必填]加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384)
     * Format: int32
     */
    algorithm?: number;
    /**
     * [必填]是否自动效验(1:是, 2:否)
     * Format: int32
     */
    is_verify?: number;
    /** [必填]域名(申请必填) */
    domain?: string;
  };
  /** 申请记录 */
  userObtainResponse: {
    /**
     * id
     * Format: int64
     */
    id?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 用户id
     * Format: int64
     */
    user_id?: string;
    /** 域名 */
    domain?: string;
    /** 主域名 */
    primary_domain?: string;
    /**
     * 品牌(1:ZeroSSL, 2:Lets Encrypt)
     * Format: int32
     */
    brand?: number;
    /**
     * 加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384)
     * Format: int32
     */
    algorithm?: number;
    /**
     * 状态(1:已签发, 2:待DNS验证, 3:申请中, 4:申请失败, 5:已取消)
     * Format: int32
     */
    status?: number;
    /**
     * 是否自动效验(1:是, 2:否)
     * Format: int32
     */
    is_verify?: number;
    /**
     * 续签来源证书id
     * Format: int64
     */
    certificate_id?: string;
    /** 描述 */
    desc?: string;
    /** TXT记录名称 */
    txt_name?: string;
    /** TXT记录值 */
    txt_value?: string;
    /** 主域名TXT记录值 */
    txt_primary_value?: string;
    /**
     * 是否已经验证过(1:是, 2:否)
     * Format: int32
     */
    is_challenged?: number;
    /** 失败原因 */
    reason?: string;
  };
  userObtainStatResponse: {
    /**
     * 总申请数
     * Format: int64
     */
    total?: string;
    /**
     * 已签发数
     * Format: int64
     */
    issued?: string;
    /**
     * 待DNS验证数
     * Format: int64
     */
    dns_verify?: string;
    /**
     * 申请中数
     * Format: int64
     */
    applying?: string;
    /**
     * 申请失败数
     * Format: int64
     */
    apply_failed?: string;
    /**
     * 已取消数
     * Format: int64
     */
    canceled?: string;
    /**
     * 续签数
     * Format: int64
     */
    renew?: string;
  };
  userOnlyIDInt64: {
    /**
     * 数据id
     * Format: int64
     * @example 187865794876019870
     */
    id: string;
  };
  userOutflowTrendBody: {
    /**
     * 空间id
     * Format: int64
     */
    bucket_id?: string;
    /** 空间名称 */
    bucket_name?: string;
    /** 趋势 */
    list?: definitions["userMetricVal"][];
  };
  userOutflowTrendResp: {
    /**
     * 总流量(byte)
     * Format: int64
     */
    total_byte?: string;
    /**
     * 平均流量(byte)
     * Format: int64
     */
    avg_byte?: string;
    /**
     * 最大流量(byte)
     * Format: int64
     */
    max_byte?: string;
    /**
     * 最大流量的空间id
     * Format: int64
     */
    max_bucket_id?: string;
    /** 最大流量的空间名 */
    max_bucket_name?: string;
    trend?: definitions["userOutflowTrendBody"][];
  };
  userOverviewResp: {
    /** 区域存储使用情况 */
    region_use_size_list?: definitions["userRegionMetricRateVal"][];
    /** 区域空间数量情况 */
    bucket_num_list?: definitions["userRegionMetricVal"][];
    /** 空间存储top3 */
    bucket_top_list?: definitions["userBucketMetricVal"][];
    /** 存储趋势 */
    trend?: definitions["userMetricVal"][];
    /** 今日昨日统计 */
    day_static?: definitions["userDayStaticBody"];
    /** 当月上月统计 */
    mon_static?: definitions["userMonStaticBody"];
  };
  userOverviewSiteResponse: {
    /**
     * 站点总计
     * Format: int32
     */
    count?: number;
    /**
     * 有效站点数量
     * Format: int32
     */
    run?: number;
    /**
     * 暂停站点数量
     * Format: int32
     */
    stop?: number;
    /**
     * 昨日新增站点数量
     * Format: int32
     */
    yesterday_count?: number;
  };
  userPreSignReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 文件名,需包含目录如果有的话,例如dir1/a.jpg
     * @description [选填] 过期时间
     * @example [
     *   "foo.jpg"
     * ]
     */
    keys?: string[];
    /**
     * 过期时间,单位秒 60 <= x <= 86400,非公开并且未传入时,默认为300s.
     * Format: int32
     * @example 3
     */
    expire_sec?: number;
    /**
     * 选择的外链域名
     * @example https://www.baidu.com
     */
    base_url: string;
  };
  userPreSignResp: {
    list?: definitions["userPreSignUrls"][];
  };
  userPreSignUrls: {
    /** 文件名称 */
    key?: string;
    /** 文件外链url */
    url?: string;
    /** 文件下载url */
    download_url?: string;
    /**
     * 文件过期时间(基于生命周期)
     * Format: int64
     */
    expire_time?: string;
  };
  userPresetListResponse: {
    /** 视频预设 */
    video_preset_list?: definitions["userVideoPresetInfoResponse"][];
    /** 水印预设 */
    watermark_preset_list?: definitions["userWatermarkPresetInfoResponse"][];
    /** 截图预设 */
    screenshot_preset_list?: definitions["userScreenshotPresetInfoResponse"][];
    /** 拼接预设 */
    splice_preset_list?: definitions["userSplicePresetInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  userPresetResponse: {
    /** 视频预设 */
    video_preset?: definitions["userVideoPresetInfoResponse"];
    /** 水印预设 */
    watermark_preset?: definitions["userWatermarkPresetInfoResponse"];
    /** 截图预设 */
    screenshot_preset?: definitions["userScreenshotPresetInfoResponse"];
    /** 拼接预设 */
    splice_preset?: definitions["userSplicePresetInfoResponse"];
  };
  userProductListResponse: {
    list?: definitions["userProductListResponseItem"][];
  };
  userProductListResponseItem: {
    /**
     * 产品id
     * Format: int64
     */
    product_id?: string;
    /** 产品名称 */
    product_name?: string;
  };
  userPutAclReq: {
    /**
     * 访问控制, private->私有,public-read->公开读
     * @example private
     */
    acl: string;
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
  };
  userPutAclResp: { [key: string]: unknown };
  userPutCorsReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /** 规则,最多10个 */
    rules?: definitions["userCorsRule"][];
  };
  userPutCorsResp: { [key: string]: unknown };
  userPutLifecycleReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /** 规则,最多100个 */
    rules?: definitions["userLifecycleRule"][];
  };
  userPutLifecycleResp: { [key: string]: unknown };
  userPutMaxAgeReq: {
    /**
     * 缓存时间
     * Format: int32
     * @example 321
     */
    max_age: number;
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
  };
  userPutMaxAgeResp: { [key: string]: unknown };
  userPutMetadataReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 文件名,需包含目录如果有的话,例如dir1/a.jpg
     * @example foo.jpg
     */
    key: string;
    /**
     * 元信息,key需要满足正则^[-a-z0-9]{1,20}$
     * @example {
     *   "m1": "v1"
     * }
     */
    meta: { [key: string]: string };
  };
  userPutMetadataResp: { [key: string]: unknown };
  userPutRefererReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * referers
     * @example [
     *   "www.baidu.com"
     * ]
     */
    referers?: string[];
    /**
     * 是否启用
     * @example false
     */
    enable: boolean;
    /**
     * 是否是白名单
     * @example false
     */
    is_white_list: boolean;
    /**
     * 是否允许空referer
     * @example false
     */
    allow_empty: boolean;
  };
  userPutRefererResp: { [key: string]: unknown };
  userPutRemarkReq: {
    /**
     * 空间备注
     * @example 这是一条备注
     */
    remark: string;
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
  };
  userPutRemarkResp: { [key: string]: unknown };
  userQueryPortByUserResponse: {
    /** http端口 */
    http_list?: string[];
    /** https端口 */
    https_list?: string[];
  };
  userQueryQueueResponse: {
    list?: definitions["userQueueInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  userQueryTaskResponse: {
    list?: definitions["userTaskInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  userQueryTriggerResponse: {
    list?: definitions["userTriggerInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  userQueryWorkflowResponse: {
    list?: definitions["userWorkflowInfoResponse"][];
    /** Format: int64 */
    total?: string;
  };
  userQueueInfoResponse: {
    id?: string;
    /** Format: int64 */
    created_at?: string;
    /** Format: int64 */
    updated_at?: string;
    /** 名称 */
    name?: string;
    /** 用户ID */
    user_id?: string;
    /** Format: int32 */
    index?: number;
    /**
     * 1：默认，2：自定义
     * Format: int32
     */
    default?: number;
    /**
     * 排队数
     * Format: int32
     */
    queue_count?: number;
    /**
     * 处理数
     * Format: int32
     */
    process_count?: number;
  };
  userReadWorkerOrderMsgRequest: {
    /**
     * 工单id
     * Format: int64
     */
    worker_order_id: string;
    /** 消息id列表 */
    message_id?: string[];
  };
  userReadWorkerOrderMsgResponse: { [key: string]: unknown };
  /** 更新账户密码请求 */
  userRecoverUserPasswordRequest: {
    /**
     * [必填] 账号 目前只支持邮箱
     * @example 12345678@qq.com
     */
    account: string;
    /**
     * [必填]密码，6-64个字符，可包含字母、数字及标点符号（除空格）
     * @example 234567
     */
    password: string;
    /**
     * [必填]密码，6-64个字符，可包含字母、数字及标点符号（除空格）
     * @example 234567
     */
    repeat_password: string;
  };
  /** 更新账户密码回复 */
  userRecoverUserPasswordResponse: { [key: string]: unknown };
  userRegionBody: {
    /** 区域名 */
    name?: string;
    /** 集群主ip */
    ip?: string;
    /** 区域备注 */
    remark?: string;
    /**
     * 区域域名id
     * Format: int64
     */
    domain_id?: string;
    /**
     * 区域节点数量
     * Format: int64
     */
    node_num?: string;
    /**
     * 区域空间大小
     * Format: int64
     */
    total_kb?: string;
    /**
     * 区域空间数
     * Format: int64
     */
    bucket_num?: string;
    /**
     * 区域id
     * Format: int64
     */
    id?: string;
  };
  userRegionMetricRateVal: {
    /**
     * 区域id
     * Format: int64
     */
    region_id?: string;
    /**
     * 值,流量单位byte,个数单位个
     * Format: int64
     */
    val?: string;
    /**
     * 占比
     * Format: float
     */
    rate?: number;
  };
  userRegionMetricVal: {
    /**
     * 区域id
     * Format: int64
     */
    region_id?: string;
    /**
     * 值,流量单位byte,个数单位个
     * Format: int64
     */
    val?: string;
  };
  userRegisterUserRequest: {
    /**
     * [必填] 注册类型， 1 用户名注册，2 邮箱注册
     * Format: int32
     * @example 1
     */
    register_type: number;
    /**
     * [选填] 账号
     * @example user1
     */
    username?: string;
    /**
     * [选填] 邮箱
     * @example 123456@qq.com
     */
    email?: string;
    /**
     * [必填] 密码，6-64个字符，可包含字母、数字及标点符号（除空格）
     * @example 123456
     */
    password: string;
    /**
     * [必填] 确认密码，6-64个字符，可包含字母、数字及标点符号（除空格）
     * @example 123456
     */
    repeat_password: string;
  };
  userRegisterUserResponse: { [key: string]: unknown };
  userRemoveObjErr: {
    /** 文件key */
    Key?: string;
    /** 状态码 */
    Code?: string;
    /** 信息 */
    Message?: string;
  };
  userRemoveObjReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 需要移除的文件key
     * @example [
     *   "foo.jpg",
     *   "foo2.jpg"
     * ]
     */
    keys?: string[];
  };
  userRemoveObjResp: {
    /** 成功队列,包含删除成功的文件key */
    deleted?: string[];
    /** 失败队列 */
    failed?: definitions["userRemoveObjErr"][];
  };
  userRetryTaskRequest: {
    /**
     * 任务ID
     * Format: int64
     * @example 161654646148646
     */
    id?: string;
  } & {
    node_id: unknown;
  };
  userRevokeCertificateRequest: {
    /** [必填]id列表 */
    id_list?: string[];
  };
  userRevokeCertificateResponse: { [key: string]: unknown };
  /** 解析记录信息 */
  userRrInfo: {
    /**
     * 记录id
     * Format: int64
     */
    id?: string;
    /**
     * 记录所属域
     * Format: int64
     */
    domain_id?: string;
    /** 记录所属域名名称 */
    domain_name?: string;
    /** 记录名 */
    name?: string;
    /** 记录类型 */
    type?: string;
    /** 记录值 */
    value?: string;
    /**
     * ttl
     * Format: int32
     */
    ttl?: number;
    /**
     * MX记录的优先级，取值范围：[1,50]，记录类型为MX记录时，此参数必需，MX 优先级的数值越低，优先级别就越高。缺省时为10
     * Format: int32
     */
    priority?: number;
    /**
     * 状态 1.开启,2.关闭
     * Format: int32
     */
    status?: number;
    /** 备注 */
    remark?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 操作时间
     * Format: int64
     */
    operated_at?: string;
  };
  userScreenshotDosage: {
    /**
     * 时间
     * Format: int64
     */
    date?: string;
    /**
     * 张数
     * Format: int64
     */
    count?: string;
  };
  userScreenshotPresetInfoResponse: {
    id?: string;
    user_id?: string;
    /** 区域ID */
    region_id?: string;
    /** 截图预设名称 */
    name?: string;
    /** 截图类型，1：单张，2：多张 */
    screenshot?: definitions["mtsScreenshotType"];
    /** 截图图片格式，1：jpg，2：png */
    screenshot_image?: definitions["mtsScreenshotImageType"];
    /**
     * 开始时间，单位秒
     * Format: float
     */
    time_start?: number;
    /**
     * 结束时间，单位秒
     * Format: float
     */
    time_end?: number;
    /**
     * 间隔时间，单位秒
     * Format: float
     */
    time_interval?: number;
    /**
     * 图片宽
     * Format: int32
     */
    image_w?: number;
    /**
     * 图片高
     * Format: int32
     */
    image_h?: number;
  };
  /** 截图配置 */
  userScreenshotPresetRequest: {
    /** Format: int64 */
    id?: string;
    /** 截图预设名称 */
    name?: string;
    /**
     * 区域ID
     * Format: int64
     */
    region_id?: string;
    /** 截图类型，1：单张，2：多张 */
    screenshot?: definitions["mtsScreenshotType"];
    /** 截图图片格式，1：jpg，2：png */
    screenshot_image?: definitions["mtsScreenshotImageType"];
    /**
     * 开始时间，单位秒
     * Format: float
     */
    time_start?: number;
    /**
     * 结束时间，单位秒
     * Format: float
     */
    time_end?: number;
    /**
     * 间隔时间，单位秒
     * Format: float
     */
    time_interval?: number;
    /**
     * 图片宽
     * Format: int32
     */
    image_w?: number;
    /**
     * 图片高
     * Format: int32
     */
    image_h?: number;
  };
  userScreenshotRequest: {
    /** 截图类型，1：单张，2：多张 */
    screenshot?: definitions["mtsScreenshotType"];
    /** 截图图片格式，1：jpg，2：png */
    screenshot_image?: definitions["mtsScreenshotImageType"];
    /**
     * 开始时间，单位秒
     * Format: float
     */
    time_start?: number;
    /**
     * 结束时间，单位秒
     * Format: float
     */
    time_end?: number;
    /**
     * 间隔时间，单位秒
     * Format: float
     */
    time_interval?: number;
    /**
     * 图片宽
     * Format: int32
     */
    image_w?: number;
    /**
     * 图片高
     * Format: int32
     */
    image_h?: number;
    /** 节点执行状态,1:已执行，0:未执行(接口响应时使用) */
    status?: definitions["mtsEnable"];
    /** 节点执行信息(接口响应时使用) */
    message?: string;
  };
  userSendWorkerOrderMsgRequest: {
    /**
     * 工单id
     * Format: int64
     */
    worker_order_id: string;
    /** 消息内容 */
    message: string;
    /**
     * 消息类型 1:文字 2:图片
     * Format: int32
     */
    message_type: number;
  };
  userSendWorkerOrderMsgResponse: { [key: string]: unknown };
  userSetDefaultDomainRequest: {
    /**
     * 空间id
     * Format: int64
     */
    bucket_id: string;
    /**
     * 域名id
     * Format: int64
     */
    domain_id: string;
  };
  userSetDefaultDomainResponse: { [key: string]: unknown };
  /** 站点列表基础信息 */
  userSiteInfo: {
    /**
     * 站点id
     * Format: int64
     */
    id?: string;
    /** 域名 */
    domain?: string;
    /** 用户账号 */
    user_name?: string;
    /** 附加消息，region_id 区域id，region_name 区域域名，resolve_status 解析状态 1处理中，2成功，3失败，resolve_status_text 解析状态原因 */
    attach?: { [key: string]: string };
    /** CNAME域名 */
    cname_domain?: string;
    /** 证书状态 */
    cert_status?: definitions["userCertStatus"];
    /** 站点状态，1有效，2暂停服务 */
    status?: definitions["globalRunState"];
    /**
     * 源站数
     * Format: int32
     */
    origin_site_num?: number;
    /**
     * 修改时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 用户id
     * Format: int64
     */
    user_id?: string;
    /** HTTPS状态，1已开启，2未开启 */
    https_status?: definitions["globalRunState"];
  };
  userSiteManagedRule: {
    rule?: definitions["globalGlobalManagedRule"];
    deploy?: definitions["globalRunState"];
  };
  /**
   * 站点解析模式
   * Format: int32
   * @description - 1: 自动解析
   *  - 2: 手动解析
   * @default 0
   * @enum {integer}
   */
  userSiteResolveMode: 0 | 1 | 2;
  userSplicePresetInfoResponse: {
    id?: string;
    user_id?: string;
    /** 区域ID */
    region_id?: string;
    /** 拼接预设名称 */
    name?: string;
    /** 图片空间ID */
    bucket_id?: string;
    /** 图片空间名 */
    bucket_name?: string;
    /** 拼接视频路径集合 */
    video_paths?: string[];
    /** 封装格式 */
    format?: definitions["mtsVideoFormatType"];
    /**
     * 分辨率宽
     * Format: int32
     */
    resolution_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    resolution_h?: number;
    /**
     * 拼接位置
     * Format: int32
     */
    splice_location?: number;
    /**
     * 码率
     * Format: int32
     */
    code_rate?: number;
    /** 启用音频,1:开，2:关 */
    audio?: definitions["mtsEnable"];
    /** 拼接视频加黑边,1:开，2:关 */
    black_border?: definitions["mtsEnable"];
  };
  /** 拼接配置 */
  userSplicePresetRequest: {
    /** Format: int64 */
    id?: string;
    /** 拼接预设名称 */
    name?: string;
    /**
     * 区域ID
     * Format: int64
     */
    region_id?: string;
    /** 图片空间ID */
    bucket_id?: string;
    /** 拼接视频路径集合 */
    video_paths?: string[];
    /** 封装格式 */
    format?: definitions["mtsVideoFormatType"];
    /**
     * 分辨率宽
     * Format: int32
     */
    resolution_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    resolution_h?: number;
    /**
     * 拼接位置
     * Format: int32
     */
    splice_location?: number;
    /**
     * 码率
     * Format: int32
     */
    code_rate?: number;
    /** 启用音频,1:开，2:关 */
    audio?: definitions["mtsEnable"];
    /** 拼接视频加黑边,1:开，2:关 */
    black_border?: definitions["mtsEnable"];
  };
  userSpliceRequest: {
    /** 图片空间ID */
    bucket_id?: string;
    /** 图片空间名 */
    bucket_name?: string;
    /** 拼接视频路径集合 */
    video_paths?: string[];
    /** 封装格式 */
    format?: definitions["mtsVideoFormatType"];
    /**
     * 分辨率宽
     * Format: int32
     */
    resolution_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    resolution_h?: number;
    /**
     * 拼接位置
     * Format: int32
     */
    splice_location?: number;
    /**
     * 码率
     * Format: int32
     */
    code_rate?: number;
    /** 启用音频,1:开，2:关 */
    audio?: definitions["mtsEnable"];
    /** 拼接视频加黑边,1:开，2:关 */
    black_border?: definitions["mtsEnable"];
    /** 节点执行状态,1:已执行，0:未执行(接口响应时使用) */
    status?: definitions["mtsEnable"];
    /** 节点执行信息(接口响应时使用) */
    message?: string;
  };
  userSsoLoginRequest: {
    /** [必填] 帐号:支持 邮箱,用户名 */
    account: string;
    /** [必填] 密码 */
    password: string;
    /** [选填] 登录sso成功后的跳转地址。因为当前是前端重定向，后端只做记录，也没有登录黑名单的说法。该字段为保留字段，可以不传。但是如果传输，则是一个规范的URL */
    service?: string;
  };
  userSsoLoginResponse: {
    /** 票据 */
    ticket?: string;
    /** 用户唯一标识 */
    user?: string;
  };
  userSsoLogoutRequest: { [key: string]: unknown };
  userSsoLogoutResponse: { [key: string]: unknown };
  userSsoVerifyLoginRequest: {
    /** [必填] 用户标识 */
    user: string;
    /** [选填] 登录sso成功后的跳转地址。因为当前是前端重定向，后端只做记录，也没有登录黑名单的说法。该字段为保留字段，可以不传。但是如果传输，则是一个规范的URL */
    service?: string;
  };
  userSsoVerifyLoginResponse: {
    /** 票据 */
    ticket?: string;
  };
  userSsoVerifyTicketRequest: {
    /** [必填] ticket票据 */
    ticket: string;
    /** [选填] 平台跳转地址。因为当前是前端重定向，后端只做记录，也没有登录黑名单的说法。该字段为保留字段，可以不传。但是如果传输，则是一个规范的URL */
    service?: string;
  };
  userSsoVerifyTicketResponse: {
    /** 用户信息 */
    info?: definitions["userUserInfo"];
    /** token */
    token?: string;
  };
  userStat: {
    /**
     * 有效
     * Format: int64
     */
    effective?: string;
    /**
     * 即将过期
     * Format: int64
     */
    will_expire?: string;
    /**
     * 已过期
     * Format: int64
     */
    expired?: string;
  };
  userStaticCommonReq: {
    /**
     * 开始日期
     * Format: int64
     * @example 1681794074
     */
    start: string;
    /**
     * 结束日期
     * Format: int64
     * @example 1681794074
     */
    end: string;
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id?: string;
    /**
     * 区域id
     * Format: int64
     * @example 187865794876019870
     */
    region_id?: string;
  };
  userStorageTrendResp: {
    /**
     * 当前存储总量(byte)
     * Format: int64
     */
    total_size?: string;
    /**
     * 平均存储量(byte)
     * Format: int64
     */
    avg_size?: string;
    /**
     * 当前文件总数
     * Format: int64
     */
    total_num?: string;
    /**
     * 平均文件数
     * Format: int64
     */
    avg_num?: string;
    /** 存储趋势 */
    trend?: definitions["userMetricVal"][];
  };
  userTaskInfoResponse: {
    id?: string;
    /**
     * 提交时间
     * Format: int64
     */
    submit_time?: string;
    /** 任务名 */
    name?: string;
    /** 资源名 */
    file_name?: string;
    /** 用户ID */
    user_id?: string;
    /** 区域ID */
    region_id?: string;
    /** 区域名 */
    region_name?: string;
    /** 空间ID */
    bucket_id?: string;
    /** 空间名 */
    bucket_name?: string;
    /** 队列ID */
    queue_id?: string;
    /** 队列名 */
    queue_name?: string;
    /** 状态， 1：调度，2:排队，3：处理，4：成功，5：失败（页面展示时，调度和排队中都显示成排队） */
    status?: definitions["mtsTaskStatusType"];
    /** 错误信息 */
    message?: string;
    /** 工作流ID */
    workflow_id?: string;
    /** 节点ID */
    node_id?: string;
    /** 节点名 */
    node_name?: string;
    /**
     * 时长
     * Format: int64
     */
    duration?: string;
    /**
     * 耗时
     * Format: int64
     */
    consuming_time?: string;
    /** 触发器ID（如果没有触发器ID，代表自建任务） */
    trigger_id?: string;
    /** 触发器名字 */
    trigger_name?: string;
    /** 资源名称 */
    resource_name?: string;
    /** 工作流配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
  };
  userTriggerInfoResponse: {
    id?: string;
    /** Format: int64 */
    created_at?: string;
    /** 名称 */
    name?: string;
    /** 用户ID */
    user_id?: string;
    /** 区域id */
    region_id?: string;
    /** 区域名 */
    region_name?: string;
    /** 空间名 */
    bucket_name?: string;
    /** 队列名 */
    queue_name?: string;
    /** 匹配规则 （1：全匹配，2：前匹配，3：后匹配） */
    match_rule?: definitions["mtsMatchRuleType"];
    /** 匹配字段 */
    match_field?: string;
    /** 状态 （1:开，2：关） */
    status?: definitions["mtsEnable"];
    /** 工作流配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
  };
  userUnreadWorkerOrderMsgCountResponse: {
    /** Format: int64 */
    count?: string;
  };
  /** 更新apikey信息 请求 */
  userUpdateApikeyRequest: {
    /**
     * [必填]  apikey id
     * Format: int64
     */
    id: string;
    /**
     * [选填] 状态 1-启用 2-禁用
     * Format: int32
     */
    status?: number;
    /** [选填] 备注信息，30字以内 */
    remark?: string;
  };
  /** 更新apikey信息 回复 */
  userUpdateApikeyResponse: { [key: string]: unknown };
  userUpdateCertificateResponse: { [key: string]: unknown };
  /** 更新域名分组备注 请求 */
  userUpdateDomainGroupRemarkRequest: {
    /**
     * [必填] 域名分组id
     * Format: int64
     */
    id: string;
    /** [选填] 备注 20字以内 */
    remark?: string;
  };
  /** 更新域名分组备注 回复 */
  userUpdateDomainGroupRemarkResponse: { [key: string]: unknown };
  /** 更新域名分组信息 请求 */
  userUpdateDomainGroupRequest: {
    /**
     * [必填] 域名分组id
     * Format: int64
     */
    id: string;
    /** [选填] 分组名称 [1-20个字符] */
    name?: string;
    /** [选传] 备注 20字以内 */
    remark?: string;
    /** [选传] 域名ids */
    domain_ids?: string[];
  };
  /** 更新域名分组信息 回复 */
  userUpdateDomainGroupResponse: { [key: string]: unknown };
  /** 更新域名信息 请求 */
  userUpdateDomainRequest: {
    /**
     * [必填] 域名id
     * Format: int64
     */
    id: string;
    /** 备注信息，200字以内 */
    remark?: string;
    /** [可选] ns_id 列表 长度为2 */
    ns_id_list?: string[];
  };
  /** 更新域名信息 回复 */
  userUpdateDomainResponse: { [key: string]: unknown };
  userUpdateOriginResponse: { [key: string]: unknown };
  userUpdateQueueIndexRequest: {
    /**
     * 产品UID
     * Format: int64
     * @example 16254646543251324
     */
    id: string;
    /**
     * 排序序号
     * Format: int32
     * @example 1
     */
    index: number;
  };
  userUpdateQueueRequest: {
    /**
     * Format: int64
     * @example 16254646543251324
     */
    id: string;
    /**
     * 名称
     * @example 111
     */
    name: string;
  };
  /** 更新记录信息 请求 */
  userUpdateRrRequest: {
    /**
     * [必填] 记录id
     * Format: int64
     */
    id: string;
    /** [选填] 记录类型 ["A", "AAAA", "CNAME", "MX", "NS", "TXT", "CAA"] */
    type?: string;
    /** [选填] 主机记录 如果要解析@.exmaple.com，主机记录要填写”@”，而不是空。 */
    name?: string;
    /** [选填] 记录值 */
    value?: string;
    /**
     * [选填] 缓存时间(秒) 默认:600 范围:[1~86400]
     * Format: int32
     */
    ttl?: number;
    /**
     * [选填] MX记录的优先级，取值范围：[1,50]，记录类型为MX记录时，此参数必需，MX 优先级的数值越低，优先级别就越高。缺省时为10
     * Format: int32
     */
    priority?: number;
    /** [选填] 备注信息，200字以内 */
    remark?: string;
    /**
     * [选填] 解析状态
     * Format: int32
     */
    status?: number;
  };
  /** 更新记录信息 回复 */
  userUpdateRrResponse: { [key: string]: unknown };
  userUpdateRrsStatusRequest: {
    /** [必填] 记录id 1-1000条 */
    ids: string[];
    /**
     * [选填] 解析状态
     * Format: int32
     */
    status: number;
    /**
     * [可选] 域名id
     * Format: int64
     */
    domain_id?: string;
  };
  userUpdateRrsStatusResponse: { [key: string]: unknown };
  userUpdateSiteAntiTheftChainResponse: { [key: string]: unknown };
  userUpdateSiteCacheConfigResponse: { [key: string]: unknown };
  userUpdateSiteErrorPageResponse: { [key: string]: unknown };
  userUpdateSiteManagedRuleResponse: { [key: string]: unknown };
  userUpdateSiteNetworkConfigResponse: { [key: string]: unknown };
  userUpdateSitePageRuleResponse: { [key: string]: unknown };
  userUpdateSiteSpeedOptimizeResponse: { [key: string]: unknown };
  userUpdateSiteSslConfigResponse: { [key: string]: unknown };
  userUpdateSiteWafRuleResponse: { [key: string]: unknown };
  userUpdateTransFormRuleResponse: { [key: string]: unknown };
  userUpdateTriggerStatusRequest: {
    /**
     * Format: int64
     * @example 16323324566
     */
    id: string;
    /**
     * 状态， 1:启用，2：停用
     * Format: int32
     * @example 1
     */
    status?: number;
  };
  /** 更新账户密码请求 */
  userUpdateUserPasswordRequest: {
    /**
     * [必填]密码，6-64个字符，可包含字母、数字及标点符号（除空格）
     * @example 123456
     */
    password: string;
    /**
     * [必填]密码，6-64个字符，可包含字母、数字及标点符号（除空格）
     * @example 234567
     */
    new_password: string;
    /**
     * [必填]密码，6-64个字符，可包含字母、数字及标点符号（除空格）
     * @example 234567
     */
    repeat_new_password: string;
  };
  /** 更新账户密码回复 */
  userUpdateUserPasswordResponse: { [key: string]: unknown };
  userUpdateUserRequest: {
    /**
     * [可选] 邮箱 绑定邮箱 或者更换绑定 暂不支持解绑
     * @example 12345678@qq.com
     */
    email?: string;
  };
  userUpdateUserResponse: { [key: string]: unknown };
  userUpdateWorkflowRequest: {
    /**
     * Format: int64
     * @example 16323324566
     */
    id: string;
    /** 名称 */
    name?: string;
    /**
     * 队列ID
     * Format: int64
     * @example 16254646543251324
     */
    queue_id: string;
    /** 工作流配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
  };
  userUploadCertificateRequest: {
    /** [必填]证书文件 */
    certificate?: string;
    /** [必填]私钥文件 */
    private_key?: string;
    /** [必填]证书备注名 */
    desc?: string;
  };
  userUploadCertificateResponse: { [key: string]: unknown };
  userUploadCheckReq: {
    /** 空间名 */
    bucket_name?: string;
    /** 文件名 */
    key?: string;
    /**
     * 空间id
     * Format: int64
     */
    bucket_id?: string;
  };
  userUploadCheckResp: {
    /** 是否通过 */
    pass?: boolean;
    /** 明细 */
    msg?: string;
  };
  userUploadEdgeCertificateResponse: { [key: string]: unknown };
  userUploadPartReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 文件名
     * @example foo.jpg
     */
    key: string;
    /**
     * 上传id
     * @example 2~F2FJDhZSF0GjBB3IugcVJ9u0xNK_LP4
     */
    upload_id: string;
    /**
     * 所属块id，范围是1-10000
     * Format: int32
     * @example 1
     */
    part_number: number;
    /**
     * 分块内容
     * Format: byte
     */
    body: string;
  };
  userUploadPartResp: {
    /** 文件etag */
    etag?: string;
    /**
     * 所属块id，范围是1-10000
     * Format: int32
     */
    part_number?: number;
  };
  userUploadReq: {
    /**
     * 空间id
     * Format: int64
     * @example 187865794876019870
     */
    bucket_id: string;
    /**
     * 文件名,需包含目录如果有的话,例如dir1/a.jpg
     * @example foo.jpg
     */
    key: string;
    /**
     * 存储类型,目前不用传递
     * @example STANDARD
     */
    storage_class?: string;
    /**
     * 文件内容
     * Format: byte
     * @example o7oA1t03
     */
    body: string;
    /**
     * 是否覆盖
     * @example false
     */
    overwrite: boolean;
  };
  userUploadResp: {
    etag?: string;
    key?: string;
  };
  userUploadTrendResp: {
    /**
     * 当日上传数
     * Format: int64
     */
    day_num?: string;
    /**
     * 平均上传数
     * Format: int64
     */
    avg_num?: string;
    /** get请求总数 */
    trend?: definitions["userMetricVal"][];
  };
  userUploadedPart: {
    /** 文件etag */
    etag?: string;
    /**
     * 所属块id，范围是1-10000
     * Format: int32
     */
    part_number?: number;
  };
  userUserInfo: {
    /**
     * 用户id
     * Format: int64
     */
    id?: string;
    /** 用户名 */
    username?: string;
    /** 邮箱 */
    email?: string;
    /**
     * 状态 1-启用 2-禁用
     * Format: int32
     */
    status?: number;
    /**
     * 分组id
     * Format: int64
     */
    group_id?: string;
    /** 分组名字 */
    group_name?: string;
    /**
     * 对外接口状态 1.开 2.关
     * Format: int32
     */
    api_status?: number;
    /**
     * 创建时间(注册时间)
     * Format: int64
     */
    created_at?: string;
    /** 注册ip */
    register_ip?: string;
    /** 注册ip所在地 */
    register_addr?: string;
    /** 注册系统名称加版本号 */
    register_system_info?: string;
    /** 注册浏览器加版本号 */
    register_browser_info?: string;
    /**
     * 最后一次登录时间
     * Format: int64
     */
    login_at?: string;
    /** 最后一次登录ip */
    login_ip?: string;
    /** 最后一次登录ip所在地 */
    login_addr?: string;
  };
  /** 管理员登录记录信息 */
  userUserLoginRecordInfo: {
    /**
     * id 序号
     * Format: int64
     * @example 11110
     */
    id?: string;
    /**
     * 登录时间
     * Format: int64
     * @example 1762347242
     */
    login_at?: string;
    /**
     * 登录ip
     * @example 192.168.2.1
     */
    login_ip?: string;
    /**
     * ip所在地
     * @example 中国.成都
     */
    login_addr?: string;
    /** 系统名称加版本号 */
    system_info?: string;
    /**
     * 浏览器加版本号
     * @description 设备信息
     *   string device_info = 7;
     */
    browser_info?: string;
  };
  userUserSummaryCollectResponse: {
    /**
     * 用户ID
     * Format: int64
     */
    user_id?: string;
    /**
     * 任务总数
     * Format: int64
     */
    total?: string;
    /**
     * 成功数
     * Format: int64
     */
    success?: string;
    /**
     * 失败数
     * Format: int64
     */
    fail?: string;
    /**
     * 总时长
     * Format: int64
     */
    duration?: string;
    /**
     * 总截图数
     * Format: int64
     */
    screenshot?: string;
    /**
     * 低清
     * Format: int64
     */
    low?: string;
    /**
     * 普青
     * Format: int64
     */
    general?: string;
    /**
     * 标清
     * Format: int64
     */
    sd?: string;
    /**
     * 高清
     * Format: int64
     */
    hd?: string;
    /**
     * 2K
     * Format: int64
     */
    two_k?: string;
    /**
     * 4K
     * Format: int64
     */
    four_k?: string;
  };
  userUserSummaryDataInfoResponse: {
    /**
     * 今日总流量（单位：byte）
     * Format: int64
     */
    now_total_bytes?: string;
    /**
     * 本月总流量（单位：byte）
     * Format: int64
     */
    month_total_bytes?: string;
    /**
     * 今日总节约流量（单位：byte）
     * Format: int64
     */
    now_total_hit_bytes?: string;
    /**
     * 本月总节约流量（单位：byte）
     * Format: int64
     */
    month_total_hit_bytes?: string;
    /**
     * 今日总请求
     * Format: int64
     */
    now_total_requests?: string;
    /**
     * 昨日总请求
     * Format: int64
     */
    last_total_requests?: string;
    /**
     * 今日命中率（保留2位小数）
     * Format: float
     */
    now_hit_rate?: number;
    /**
     * 昨日命中率（保留2位小数）
     * Format: float
     */
    last_hit_rate?: number;
    /**
     * 今日峰值带宽（单位：bps）
     * Format: int64
     */
    now_top_speed?: string;
    /**
     * 本月峰值带宽（单位：bps）
     * Format: int64
     */
    month_top_speed?: string;
    /**
     * 今日独立访客
     * Format: int64
     */
    now_ips?: string;
    /**
     * 昨日独立访客
     * Format: int64
     */
    last_ips?: string;
  };
  userUserSummarySiteTopInfoResponse: {
    list?: definitions["userUserSummarySiteTopInfoResponseItem"][];
  };
  userUserSummarySiteTopInfoResponseItem: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /** 站点名称 */
    site_name?: string;
    /**
     * 流量
     * Format: int64
     */
    bytes?: string;
    /**
     * 流量占比
     * Format: float
     */
    bytes_pro?: number;
  };
  userUserSummaryWafInfoResponse: {
    /**
     * 今日威胁数
     * Format: int64
     */
    now_menaces?: string;
    /**
     * 昨日威胁数
     * Format: int64
     */
    last_menaces?: string;
    /**
     * 今日防护数
     * Format: int64
     */
    now_prevents?: string;
    /**
     * 昨日防护数
     * Format: int64
     */
    last_prevents?: string;
  };
  userValidDomainNsRequest: {
    /**
     * [必填]  域名id
     * Format: int64
     */
    id: string;
  };
  userValidDomainNsResponse: {
    /**
     * ns服务器状态 1-正常 2-异常
     * Format: int32
     */
    ns_status?: number;
    /** 分配的ns服务器 */
    assign_ns_list?: string[];
    /** 当前ns服务器 */
    current_ns_list?: string[];
  };
  /** 验证验证码请求 */
  userVerifyCaptchaRequest: {
    /**
     * [必填] 账号 目前只支持邮箱 (1.邮箱注册,2.绑定邮箱,3.修改邮箱(老邮箱),4.修改邮箱(新邮箱)，5.重置密码)
     * @example 12345678@qq.com
     */
    account: string;
    /**
     * [必填]场景
     * Format: int32
     * @example 1
     */
    scene: number;
    /**
     * [必填] 验证码
     * @example abcdef
     */
    code: string;
  };
  /** 验证验证码回复 */
  userVerifyCaptchaResponse: { [key: string]: unknown };
  userVideoDosage: {
    /**
     * 时间
     * Format: int64
     */
    date?: string;
    /**
     * 低清
     * Format: int64
     */
    low?: string;
    /**
     * 普清
     * Format: int64
     */
    general?: string;
    /**
     * 标清
     * Format: int64
     */
    sd?: string;
    /**
     * 高清
     * Format: int64
     */
    hd?: string;
    /**
     * 2K
     * Format: int64
     */
    two_k?: string;
    /**
     * 4K
     * Format: int64
     */
    four_k?: string;
  };
  userVideoPresetInfoResponse: {
    id?: string;
    user_id?: string;
    /** 区域ID */
    region_id?: string;
    /** 视频预设名称 */
    name?: string;
    /** 封装格式(1:mp4,2:flv,3:hls) */
    format?: definitions["mtsVideoFormatType"];
    /** 视频编码格式(1:H264,2:H265) */
    encoding_format?: definitions["mtsVideoEncodingFormatType"];
    /** 强制使用码率(1:开，2:关) */
    code_rate_use?: definitions["mtsEnable"];
    /**
     * 码率
     * Format: int32
     */
    code_rate?: number;
    /**
     * crf
     * Format: int32
     */
    crf?: number;
    /**
     * 分辨率宽
     * Format: int32
     */
    resolution_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    resolution_h?: number;
    /**
     * 在播放器中宽
     * Format: int32
     */
    player_w?: number;
    /**
     * 在播放器中高
     * Format: int32
     */
    player_h?: number;
    /** 视频按比例缩放,0:关，1：指定为1，2：指定为2 */
    play_ratio?: definitions["mtsEnable"];
    /**
     * 帧率
     * Format: int32
     */
    fps?: number;
    /**
     * 关键帧最大间隔
     * Format: int32
     */
    frame?: number;
    /**
     * 分段时长
     * Format: int32
     */
    segment_time?: number;
    /**
     * 片段截取开始
     * Format: float
     */
    part_spilt_start?: number;
    /**
     * 片段截取时长
     * Format: float
     */
    part_spilt_len?: number;
    /** 禁用音频,1:开，2:关 */
    audio_disable?: definitions["mtsEnable"];
    /** 音频编码格式(1:mp3,2:acc,3:acc_he) */
    audio_encoding_format?: definitions["mtsAudioEncodingFormatType"];
    /**
     * 声道
     * Format: int32
     */
    audio_channel?: number;
    /** 强制使用码率,1:开，2:关 */
    audio_code_rate_use?: definitions["mtsEnable"];
    /**
     * 码率
     * Format: int32
     */
    audio_code_rate?: number;
    /**
     * 采样率
     * Format: int32
     */
    audio_sampling_rate?: number;
    /** 禁用字幕,1:开，2:关 */
    subtitle_disable?: definitions["mtsEnable"];
    /** 字幕空间ID */
    subtitle_bucket_id?: string;
    /** 字幕空间名称 */
    subtitle_bucket_name?: string;
    /** 字幕路径 */
    subtitle_path?: string;
    /** 1:自定义，2：系统 */
    custom_type?: definitions["mtsEnable"];
    /** 去黑边,1:开，0:关  默认关 */
    go_black_border?: definitions["mtsEnable"];
    /** 水印配置 */
    watermark_list?: definitions["userWatermarkPresetRequest"][];
  };
  userVideoPresetRequest: {
    /** Format: int64 */
    id?: string;
    /** 视频预设名称 */
    name?: string;
    /**
     * 区域ID
     * Format: int64
     */
    region_id?: string;
    /**
     * 封装格式(1:mp4,2:flv,3:hls)
     * @example 1
     */
    format: definitions["mtsVideoFormatType"];
    /**
     * 视频编码格式(1:H264,2:H265)
     * @example 1
     */
    encoding_format: definitions["mtsVideoEncodingFormatType"];
    /** 强制使用码率,1:开，2:关 */
    code_rate_use?: definitions["mtsEnable"];
    /**
     * 码率
     * Format: int32
     */
    code_rate?: number;
    /**
     * crf
     * Format: int32
     */
    crf?: number;
    /**
     * 分辨率宽
     * Format: int32
     */
    resolution_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    resolution_h?: number;
    /**
     * 在播放器中宽
     * Format: int32
     */
    player_w?: number;
    /**
     * 在播放器中高
     * Format: int32
     */
    player_h?: number;
    /** 视频按比例缩放,0:关，1：指定为1，2：指定为2 */
    play_ratio?: definitions["mtsEnable"];
    /**
     * 帧率
     * Format: int32
     */
    fps?: number;
    /**
     * 关键帧最大间隔
     * Format: int32
     */
    frame?: number;
    /**
     * 分段时长
     * Format: int32
     */
    segment_time?: number;
    /**
     * 片段截取开始
     * Format: float
     */
    part_spilt_start?: number;
    /**
     * 片段截取时长
     * Format: float
     */
    part_spilt_len?: number;
    /** 禁用音频,1:开，2:关 */
    audio_disable?: definitions["mtsEnable"];
    /** 音频编码格式(1:mp3,2:acc,3:acc_he) */
    audio_encoding_format?: definitions["mtsAudioEncodingFormatType"];
    /**
     * 声道
     * Format: int32
     */
    audio_channel?: number;
    /** 强制使用码率,1:开，2:关 */
    audio_code_rate_use?: definitions["mtsEnable"];
    /**
     * 码率
     * Format: int32
     */
    audio_code_rate?: number;
    /**
     * 采样率
     * Format: int32
     */
    audio_sampling_rate?: number;
    /** 禁用字幕,1:开，2:关 */
    subtitle_disable?: definitions["mtsEnable"];
    /** 字幕空间ID */
    subtitle_bucket_id?: string;
    /** 字幕路径 */
    subtitle_path?: string;
    /** 去黑边,1:开，0:关  默认关 */
    go_black_border?: definitions["mtsEnable"];
  };
  /** 视频配置 */
  userVideoRequest: {
    /**
     * 封装格式(1:mp4,2:flv,3:hls)
     * @example 1
     */
    format: definitions["mtsVideoFormatType"];
    /**
     * 视频编码格式(1:H264,2:H265)
     * @example 1
     */
    encoding_format: definitions["mtsVideoEncodingFormatType"];
    /** 强制使用码率,1:开，2:关 */
    code_rate_use?: definitions["mtsEnable"];
    /**
     * 码率
     * Format: int32
     */
    code_rate?: number;
    /**
     * crf
     * Format: int32
     */
    crf?: number;
    /**
     * 分辨率宽
     * Format: int32
     */
    resolution_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    resolution_h?: number;
    /**
     * 在播放器中宽
     * Format: int32
     */
    player_w?: number;
    /**
     * 在播放器中高
     * Format: int32
     */
    player_h?: number;
    /** 视频按比例缩放,0:关，1：指定为1，2：指定为2 */
    play_ratio?: definitions["mtsEnable"];
    /**
     * 帧率
     * Format: int32
     */
    fps?: number;
    /**
     * 关键帧最大间隔
     * Format: int32
     */
    frame?: number;
    /**
     * 分段时长
     * Format: int32
     */
    segment_time?: number;
    /**
     * 片段截取开始
     * Format: float
     */
    part_spilt_start?: number;
    /**
     * 片段截取时长
     * Format: float
     */
    part_spilt_len?: number;
    /** 禁用音频,1:开，2:关 */
    audio_disable?: definitions["mtsEnable"];
    /** 音频编码格式(1:mp3,2:acc,3:acc_he) */
    audio_encoding_format?: definitions["mtsAudioEncodingFormatType"];
    /**
     * 声道
     * Format: int32
     */
    audio_channel?: number;
    /** 强制使用码率,1:开，2:关 */
    audio_code_rate_use?: definitions["mtsEnable"];
    /**
     * 码率
     * Format: int32
     */
    audio_code_rate?: number;
    /**
     * 采样率
     * Format: int32
     */
    audio_sampling_rate?: number;
    /** 禁用字幕,1:开，2:关 */
    subtitle_disable?: definitions["mtsEnable"];
    /** 字幕空间ID */
    subtitle_bucket_id?: string;
    /** 字幕空间名称 */
    subtitle_bucket_name?: string;
    /** 字幕路径 */
    subtitle_path?: string;
    /** 节点执行状态,1:已执行，0:未执行(接口响应时使用) */
    status?: definitions["mtsEnable"];
    /** 节点执行信息(接口响应时使用) */
    message?: string;
    /** 去黑边,1:开，0:关  默认关 */
    go_black_border?: definitions["mtsEnable"];
    /** 预设水印配置ID 如果配置是从预设里选择的，必填 */
    watermark_preset_id_list?: string[];
    /** 水印配置 */
    watermark_list?: definitions["userWatermarkRequest"][];
  };
  userVideoResolution: {
    /** 清晰度类型 */
    resolution_type?: definitions["mtsResolutionType"];
    /**
     * 时长
     * Format: int64
     */
    duration?: string;
  };
  userWatermarkPresetInfoResponse: {
    id?: string;
    user_id?: string;
    /** 水印预设名称 */
    name?: string;
    /** 区域ID */
    region_id?: string;
    /**
     * 分辨率宽
     * Format: int32
     */
    preview_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    preview_h?: number;
    /** 水印类型,1:图片，2：文字 */
    type?: definitions["mtsWatermarkType"];
    /** 水印位置 */
    location?: definitions["mtsLocationType"];
    /**
     * 水印边距-横向
     * Format: int32
     */
    margin_w?: number;
    /**
     * 水印边距-纵向
     * Format: int32
     */
    margin_h?: number;
    /** 水印时间线类型，1：从开头，2：从结束 */
    time_line?: definitions["mtsTimeLineType"];
    /**
     * 水印时间线开始时间，单位秒
     * Format: int32
     */
    time_start?: number;
    /**
     * 水印时间线持续时间，单位秒
     * Format: int32
     */
    time_duration?: number;
    /** 调整到视频范围内 */
    time_adjustment?: definitions["mtsEnable"];
    /** 图片空间ID */
    image_bucket_id?: string;
    /** 图片空间名称 */
    image_bucket_name?: string;
    /** 图片路径 */
    image_path?: string;
    /**
     * 图片自适应缩放,0.001-1
     * Format: float
     */
    image_adaptive?: number;
    /** 水印文字 */
    text_word?: string;
    /** 水印字体 */
    text_font?: definitions["mtsFontType"];
    /**
     * 水印字体大小
     * Format: int32
     */
    text_font_size?: number;
    /** 水印字体颜色 */
    text_font_color?: string;
  };
  /** 水印配置 */
  userWatermarkPresetRequest: {
    /** Format: int64 */
    id?: string;
    /** 水印预设名称 */
    name?: string;
    /**
     * 区域ID
     * Format: int64
     */
    region_id?: string;
    /**
     * 分辨率宽
     * Format: int32
     */
    preview_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    preview_h?: number;
    /** 水印类型,1:图片，2：文字 */
    type?: definitions["mtsWatermarkType"];
    /** 水印位置 */
    location?: definitions["mtsLocationType"];
    /** 忽略循环，1：开，2：关 */
    ignore_loop?: definitions["mtsEnable"];
    /**
     * 水印边距-横向
     * Format: int32
     */
    margin_w?: number;
    /**
     * 水印边距-纵向
     * Format: int32
     */
    margin_h?: number;
    /** 水印时间线类型，1：从开头，2：从结束 */
    time_line?: definitions["mtsTimeLineType"];
    /**
     * 水印时间线开始时间，单位秒
     * Format: int32
     */
    time_start?: number;
    /**
     * 水印时间线持续时间，单位秒
     * Format: int32
     */
    time_duration?: number;
    /** 调整到视频范围内（1：开，2：关） */
    time_adjustment?: definitions["mtsEnable"];
    /** 图片空间ID */
    image_bucket_id?: string;
    /** 图片路径 */
    image_path?: string;
    /**
     * 图片自适应缩放,0.01-1
     * Format: float
     */
    image_adaptive?: number;
    /** 水印文字 */
    text_word?: string;
    /** 水印字体 */
    text_font?: definitions["mtsFontType"];
    /**
     * 水印字体大小
     * Format: int32
     */
    text_font_size?: number;
    /** 水印字体颜色 */
    text_font_color?: string;
  };
  userWatermarkPreviewResponse: {
    /** Format: byte */
    data?: string;
  };
  userWatermarkRequest: {
    /**
     * 分辨率宽
     * Format: int32
     */
    preview_w?: number;
    /**
     * 分辨率高
     * Format: int32
     */
    preview_h?: number;
    /** 水印类型,1:图片，2：文字 */
    type?: definitions["mtsWatermarkType"];
    /** 水印位置 */
    location?: definitions["mtsLocationType"];
    /** 忽略循环，1：开，2：关 */
    ignore_loop?: definitions["mtsEnable"];
    /**
     * 水印边距-横向
     * Format: int32
     */
    margin_w?: number;
    /**
     * 水印边距-纵向
     * Format: int32
     */
    margin_h?: number;
    /** 水印时间线类型，1：从开头，2：从结束 */
    time_line?: definitions["mtsTimeLineType"];
    /**
     * 水印时间线开始时间，单位秒
     * Format: int32
     */
    time_start?: number;
    /**
     * 水印时间线持续时间，单位秒
     * Format: int32
     */
    time_duration?: number;
    /** 调整到视频范围内（1：开，2：关） */
    time_adjustment?: definitions["mtsEnable"];
    /** 图片空间ID */
    image_bucket_id?: string;
    /** 图片空间名称 */
    image_bucket_name?: string;
    /** 图片路径 */
    image_path?: string;
    /**
     * 图片自适应缩放,0.01-1
     * Format: float
     */
    image_adaptive?: number;
    /** 水印文字 */
    text_word?: string;
    /** 水印字体 */
    text_font?: definitions["mtsFontType"];
    /**
     * 水印字体大小
     * Format: int32
     */
    text_font_size?: number;
    /** 水印字体颜色 */
    text_font_color?: string;
  };
  /** 工作流总配置 */
  userWorkflowConf: {
    /** 配置类型 */
    workflow_conf_type?: definitions["mtsWorkflowConfType"];
    /** 视频配置 */
    workflow_video_conf?: definitions["userWorkflowVideoConf"];
    /** 拼接配置 */
    workflow_splice_conf?: definitions["userWorkflowSpliceConf"];
    /** 截图配置 */
    workflow_screenshot_conf?: definitions["userWorkflowScreenshotConf"];
    /** 输出配置 */
    workflow_out_put_conf?: definitions["userWorkflowOutPutConf"];
  };
  userWorkflowInfoResponse: {
    id?: string;
    /** Format: int64 */
    created_at?: string;
    /** Format: int64 */
    updated_at?: string;
    /** 名称 */
    name?: string;
    /** 用户ID */
    user_id?: string;
    /** 区域ID */
    region_id?: string;
    region_name?: string;
    /** 空间名 */
    bucket_name?: string;
    /** 队列ID */
    queue_id?: string;
    /** 队列名 */
    queue_name?: string;
    /** 工作流配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
  };
  /** 输出配置 */
  userWorkflowOutPutConf: {
    /** 空间ID */
    bucket_id?: string;
    /** 空间名 */
    bucket_name?: string;
    /** 名称或前缀 */
    name?: string;
    /** 名称后缀 */
    name_suffix?: string;
    /** hls格式名称或前缀 */
    hls_name?: string;
    /** hls格式名称后缀 */
    hls_suffix?: string;
    /** 点执行状态,1:已执行，0:未执行(接口响应时使用) */
    status?: definitions["mtsEnable"];
    /** 输出信息，如错误(接口响应时使用) */
    message?: string;
  };
  /** 截图配置 */
  userWorkflowScreenshotConf: {
    /** 输出配置 */
    workflow_out_put_conf?: definitions["userWorkflowOutPutConf"];
    /** 截图配置详情 */
    screenshot_preset?: definitions["userScreenshotRequest"];
    /** 预设ID */
    screenshot_preset_id?: string;
  };
  /** 拼接配置 */
  userWorkflowSpliceConf: {
    /** 工作流总配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
    /** 工作流拼接配置 */
    splice_preset?: definitions["userSpliceRequest"];
    /** 预设ID */
    splice_preset_id?: string;
  };
  /** 视频配置 */
  userWorkflowVideoConf: {
    /** 轮循配置 */
    workflow_conf_list?: definitions["userWorkflowConf"][];
    /** 配置详情 */
    video_preset?: definitions["userVideoRequest"];
    /** 预设视频配置ID 如果配置是从预设里选择的，必填 */
    video_preset_id?: string;
    /** 预设水印配置ID 如果配置是从预设里选择的，必填 */
    watermark_preset_id_list?: string[];
  };
  v1cdnclientuserCertificateResponse: {
    /**
     * 站点id
     * Format: int64
     */
    site_id?: string;
    /**
     * 证书类型(1:边缘证书, 2:源服务器证书)
     * Format: int32
     */
    cert_type?: number;
    /**
     * 证书来源(1:api, 2:自定义上传)
     * Format: int32
     */
    source?: number;
    /** 证书域名 */
    domain?: string;
    /** 品牌 */
    brand?: string;
    /**
     * 过期时间
     * Format: int64
     */
    expire_at?: string;
    /**
     * 有效期
     * Format: int64
     */
    valid_day?: string;
    /**
     * 证书ApiID
     * Format: int64
     */
    api_id?: string;
    /**
     * 证书选择id
     * Format: int64
     */
    select_id?: string;
    /** 证书状态(1:正常, 2:过期, 3:即将过期) */
    status?: definitions["userCertificateStatus"];
    /**
     * 证书id
     * Format: int64
     */
    id?: string;
  };
  v1cdnclientuserCertificateStatResponse: {
    /** 边缘证书 */
    edge?: definitions["userStat"];
    /** 源服务器证书 */
    origin?: definitions["userStat"];
  };
  /** 获取DNS系统配置列表 回复 */
  v1dnsclientuserGetConfigResponse: {
    info?: definitions["userConfigInfo"];
  };
  v1mtsResponseEmpty: { [key: string]: unknown };
  /** 证书记录 */
  v1sslclientuserCertificateResponse: {
    /**
     * id
     * Format: int64
     */
    id?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
    /**
     * 用户id
     * Format: int64
     */
    user_id?: string;
    /** 域名 */
    domain?: string;
    /** 主域名 */
    primary_domain?: string;
    /**
     * 品牌(1:ZeroSSL, 2:Lets Encrypt)
     * Format: int32
     */
    brand?: number;
    /**
     * 加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384)
     * Format: int32
     */
    algorithm?: number;
    /**
     * 是否为自有证书(1:是, 2:否)
     * Format: int32
     */
    is_own?: number;
    /** 序列号 */
    sn?: string;
    /** 证书指纹 */
    fingerprint?: string;
    /** sha2 */
    sha2?: string;
    /**
     * 到期时间
     * Format: int64
     */
    expiration_time?: string;
    /**
     * 签发时间
     * Format: int64
     */
    issued_date?: string;
    /**
     * 状态(1:正常, 2:已提交续期, 3:吊销中, 4:已吊销, 5:即将到期, 6:已到期)
     * Format: int32
     */
    status?: number;
    /**
     * 是否自动效验(1:是, 2:否)
     * Format: int32
     */
    is_verify?: number;
    /** 描述 */
    desc?: string;
    /**
     * 是否自动续签(1:是, 2:否)
     * Format: int32
     */
    is_renewal?: number;
    /** 品牌名称 */
    own_brand?: string;
  };
  v1sslclientuserCertificateStatResponse: {
    /**
     * 签发总数
     * Format: int64
     */
    total?: string;
    /**
     * 正常数
     * Format: int64
     */
    normal?: string;
    /**
     * 即将过期数
     * Format: int64
     */
    expiring?: string;
    /**
     * 已到期数
     * Format: int64
     */
    expired?: string;
    /**
     * 已吊销数
     * Format: int64
     */
    revoked?: string;
  };
  /** 系统设置 */
  v1sslclientuserGetConfigResponse: {
    /** 品牌(1:ZeroSSL, 2:Lets Encrypt)(多个用逗号分隔,主在前) */
    brand?: string;
    /** 密钥 */
    key?: string;
    /** 邮箱 */
    email?: string;
    /** 算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384), 多个用逗号分隔 */
    algorithm?: string;
    /**
     * 自动续期(1:是, 2:否)
     * Format: int32
     */
    auto_renew?: number;
    /**
     * 执行自动续期天数
     * Format: int64
     */
    renew_days?: string;
    /**
     * 执行自动续期小时
     * Format: int64
     */
    renew_hour?: string;
    /**
     * 显示即将过期天数
     * Format: int64
     */
    expire_show?: string;
    /**
     * 重试次数
     * Format: int64
     */
    retry_times?: string;
    /**
     * 重试延迟时间(秒)
     * Format: int64
     */
    retry_delay?: string;
    /**
     * 创建时间
     * Format: int64
     */
    created_at?: string;
    /**
     * 更新时间
     * Format: int64
     */
    updated_at?: string;
  };
}

export interface operations {
  AnnouncementSrv_UpsertAnnouncementUser: {
    parameters: {
      body: {
        body: definitions["announcementUpsertAnnouncementUserRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apiv1ResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AlarmService_GetAlarm: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetAlarmResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AnnouncementSrv_QueryAnnouncement: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /** [选填]标题 */
        title?: string;
        /** [选填]内容 */
        content?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["announcementQueryAnnouncementResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AnnouncementSrv_QueryAnnouncementAlert: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["announcementQueryAnnouncementResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AnnouncementSrv_GetAnnouncementInfo: {
    parameters: {
      query: {
        announcement_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["announcementGetAnnouncementInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Apikey_GetApikey: {
    parameters: {
      query: {
        /** [必填]  apikey id */
        id: string;
      };
    };
    responses: {
      200: {
        schema: definitions["userApikeyInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Apikey_UpdateApikey: {
    parameters: {
      body: {
        body: definitions["userUpdateApikeyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateApikeyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Apikey_CreateApikey: {
    parameters: {
      body: {
        body: definitions["userCreateApikeyRequest"];
      };
    };
    responses: {
      200: {
        schema: definitions["userApikeyInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Apikey_DeleteApikey: {
    parameters: {
      body: {
        body: definitions["userDeleteApikeyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteApikeyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Apikey_ListApikey: {
    parameters: {
      query: {
        /** [必填] 起始条数，默认为0 */
        offset?: number;
        /** [必填] 分页条数，0-500条 0代表不限制 */
        limit?: number;
        /** [可选] 排序字段 "created_at", "updated_at", "operated_at" */
        sort?: string;
        /** [可选] 排序方式 "asc","desc" */
        order?: string;
        /** [可选] 搜索备注 30字以内 */
        remark_keyword?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListApikeyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CaptchaService_GetCaptcha: {
    parameters: {
      query: {
        /** [必填] 账号 */
        account: string;
        /** [必填]场景 1:用户注册 2:用户登录  3:用户忘记密码 4:管理员登录 */
        scene: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetCaptchaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CaptchaService_CheckCaptcha: {
    parameters: {
      body: {
        body: definitions["userCheckCaptchaRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCheckCaptchaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_Create: {
    parameters: {
      body: {
        body: definitions["userCreateBucketReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateBucketResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_DeleteBucket: {
    parameters: {
      query: {
        /** 空间id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteBucketResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_PutAcl: {
    parameters: {
      body: {
        body: definitions["userPutAclReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPutAclResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_GetBucketBaseInfo: {
    parameters: {
      query: {
        /** 空间id */
        id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBucketBody"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_GetCors: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetCorsResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_PutCors: {
    parameters: {
      body: {
        body: definitions["userPutCorsReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPutCorsResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_ClearCors: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userClearCorsResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_GetInfo: {
    parameters: {
      query: {
        /** 空间id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetInfoResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_GetLifecycle: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetLifecycleResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_PutLifecycle: {
    parameters: {
      body: {
        body: definitions["userPutLifecycleReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPutLifecycleResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_List: {
    parameters: {
      query: {
        /** 区域id */
        region_id?: string;
        /** 空间名 */
        name?: string;
        /** 标签key */
        tag_key?: string;
        /** 标签value */
        tag_value?: string;
        /** 访问控制,private->私有,public-read->公开读 */
        acl?: string;
        /** 排序字段,[name, created_at, updated_at] */
        sort?: string;
        /** 排序方式,[asc, desc] */
        order?: string;
        /** 起始条数 */
        offset?: number;
        /** 起始条数 */
        limit: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_PutMaxAge: {
    parameters: {
      body: {
        body: definitions["userPutMaxAgeReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPutMaxAgeResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_GetNotification: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetNotificationResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_ModifyNotification: {
    parameters: {
      body: {
        body: definitions["userModifyNotificationReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userModifyNotificationResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_AddNotification: {
    parameters: {
      body: {
        body: definitions["userAddNotificationReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userOnlyIDInt64"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_DelNotification: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
        /** 通知规则id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDelNotificationResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_GetReferer: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetRefererResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_PutReferer: {
    parameters: {
      body: {
        body: definitions["userPutRefererReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPutRefererResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_PutRemark: {
    parameters: {
      body: {
        body: definitions["userPutRemarkReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPutRemarkResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_GetTag: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetTagResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_ModifyTag: {
    parameters: {
      body: {
        body: definitions["userModifyTagReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userModifyTagResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_AddTag: {
    parameters: {
      body: {
        body: definitions["userAddTagReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userOnlyIDInt64"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Bucket_DelTag: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id?: string;
        /** 标签id */
        tag_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDelTagResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Captcha_CreateCaptcha: {
    parameters: {
      body: {
        body: definitions["userCreateCaptchaRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateCaptchaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Captcha_VerifyCaptcha: {
    parameters: {
      body: {
        body: definitions["userVerifyCaptchaRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userVerifyCaptchaResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PortService_QueryPortByUser: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userQueryPortByUserResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_ListSite: {
    parameters: {
      query: {
        /** 起始条数 */
        offset?: number;
        /** 分页条数 */
        limit?: number;
        /** 排序字段,默认创建时间,created_at */
        sort?: string;
        /** 排序方式 默认desc倒序 */
        order?: string;
        /** 搜索域名关键字 */
        keyword?: string;
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /**
         * 证书状态，1有效 2即将到期 3未添加 4已到期
         *
         *  - 1: 有效
         *  - 2: 即将到期
         *  - 3: 未申请
         *  - 4: 过期
         */
        cert_status?: 0 | 1 | 2 | 3 | 4;
        /**
         * 站点状态 1有效 2暂停服务
         *
         *  - 1: 开启
         *  - 2: 关闭
         */
        status?: 0 | 1 | 2;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListSiteResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_CreatSite: {
    parameters: {
      body: {
        body: definitions["userCreatSiteRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreatSiteResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteAntiStealingLink: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteAntiStealingLinkResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteAntiTheftChain: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          anti_theft_chain?: definitions["siteAntiStealingLink"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteAntiTheftChainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteCacheConfig: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteCacheConfigResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteCacheConfig: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          cache_config?: definitions["siteCacheConfig"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteCacheConfigResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_ClearSiteCache: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          /** url  不传则清理站点缓存 */
          url?: string[];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userClearSiteCacheResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteErrorPage: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteErrorPageResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteErrorPage: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          error_page?: definitions["siteErrorPage"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteErrorPageResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_ListSiteManagedRule: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
        /** 托管规则分类查询 0 WAF预制规则，1 DDOS预制规则 */
        rule_type: 0 | 1;
      };
      query: {
        /** 起始条数 */
        offset?: number;
        /** 分页条数 */
        limit?: number;
        /** 关键词搜索，描述 */
        keyword?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListSiteManagedRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteManagedRule: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
        /** 托管规则分类查询 0 WAF预制规则，1 DDOS预制规则 */
        rule_type: 0 | 1;
      };
      body: {
        body: {
          /** 规则id,不传则设置全局，可批量 */
          rule_id?: string[];
          deploy?: definitions["globalRunState"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteManagedRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteNetworkConfig: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteNetworkConfigResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteNetworkConfig: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          network_config?: definitions["siteNetworkConfig"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteNetworkConfigResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteOrigin: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteOriginResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateOrigin: {
    parameters: {
      path: {
        /** 域名 */
        site_id: string;
      };
      body: {
        body: {
          /** 源站 */
          origin_configure?: definitions["siteOrigin"];
          /** 是否跟随源站 1 是 2 否 */
          follow_origin?: definitions["globalRunState"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateOriginResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_OverviewSite: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userOverviewSiteResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_ListSitePageRule: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        /** 起始条数 */
        offset?: number;
        /** 分页条数 */
        limit?: number;
        /** 排序字段,不传默认优先级排序 */
        sort?: string;
        /** 排序方式 默认desc倒序 */
        order?: string;
        /** 搜索规则名称关键字 */
        keyword?: string;
        start_time?: string;
        end_time?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListSitePageRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_CreateSitePageRule: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          page_rule?: definitions["sitePageRuleInfo"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateSitePageRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSitePageRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSitePageRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSitePageRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
      body: {
        body: {
          page_rule?: definitions["sitePageRuleInfo"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSitePageRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_DeleteSitePageRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteSitePageRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteResolveStatus: {
    parameters: {
      query: {
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteResolveStatusResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteSpeedOptimize: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteSpeedOptimizeResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteSpeedOptimize: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          speed_optimization?: definitions["corepbsiteSpeedOptimization"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteSpeedOptimizeResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteSslConfig: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteSslConfigResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteSslConfig: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          ssl_config?: definitions["siteSslConfig"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteSslConfigResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_ListSiteTransFormRule: {
    parameters: {
      path: {
        site_id: string;
      };
      query: {
        /** 起始条数 */
        offset?: number;
        /** 分页条数 */
        limit?: number;
        /** 排序字段,不传默认优先级排序 */
        sort?: string;
        /** 排序方式 默认desc倒序 */
        order?: string;
        /** 搜索规则名称关键字 */
        keyword?: string;
        start_time?: string;
        end_time?: string;
        /**
         * - 1: 1 请求头
         *  - 2: 2 响应头
         *  - 3: 3 url重写
         */
        rule_type?: 0 | 1 | 2 | 3;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListSiteTransFormRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetTransFormRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetTransFormRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateTransFormRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
      body: {
        body: {
          rule?: definitions["siteSiteTransFormRule"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateTransFormRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_DeleteTransFormRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteTransFormRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_CreateSiteTransFormRule: {
    parameters: {
      path: {
        site_id: string;
        /** 转换规则类型，1请求头 2响应头 url重写 */
        rule_type: 0 | 1 | 2 | 3;
      };
      body: {
        body: {
          rule?: definitions["siteSiteTransFormRule"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateSiteTransFormRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_ListSiteWafRule: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
      query: {
        /** 起始条数 */
        offset?: number;
        /** 分页条数 */
        limit?: number;
        /** 排序字段,不传默认优先级排序 */
        sort?: string;
        /** 排序方式 默认desc倒序 */
        order?: string;
        /** 搜索域名关键字 */
        keyword?: string;
        /**
         * 操作
         *
         *  - 0: 允许
         *  - 1: 拒绝
         *  - 2: 绕过
         *  - 3: 挑战
         *  - 4: JS
         *  - 5: 验证码
         *  - 6: 动态
         */
        op?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | -1;
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListSiteWafRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_CreatSiteWafRule: {
    parameters: {
      path: {
        site_id: string;
      };
      body: {
        body: {
          rule?: definitions["siteSiteWafRule"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreatSiteWafRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSiteWafRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteWafRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_UpdateSiteWafRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
      body: {
        body: {
          rule?: definitions["siteSiteWafRule"];
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateSiteWafRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_DeleteSiteWafRule: {
    parameters: {
      path: {
        site_id: string;
        rule_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteSiteWafRuleResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_GetSite: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetSiteResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  SiteServer_DeleteSite: {
    parameters: {
      path: {
        /** 站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteSiteResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_BandwidthList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticBandwidthListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_CodeList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticCodeListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_HitRateList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticHitRateListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_IpsList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticIpsListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_MenacesList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticMenacesListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_UserSummaryDataInfo: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUserSummaryDataInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_UserSummarySiteTopInfo: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUserSummarySiteTopInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_UserSummaryWafInfo: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUserSummaryWafInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_PreventsList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticPreventsListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_ProperContentList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticProperContentListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_RequestList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticRequestListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_ProperSummaryInfo: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticProperSummaryInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TrafficSummaryInfo: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTrafficSummaryInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_WafSummaryInfo: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticWafSummaryInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopDomainList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopDomainListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopRefererRequestList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopRefererRequestListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopRefererTrafficList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopRefererTrafficListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUaBrowserRequestList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUaBrowserRequestListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUaBrowserTrafficList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUaBrowserTrafficListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUaDeviceRequestList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUaDeviceRequestListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUaDeviceTrafficList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUaDeviceTrafficListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUaSystemRequestList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUaSystemRequestListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUaSystemTrafficList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUaSystemTrafficListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUrlRequestList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUrlRequestListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TopUrlTrafficList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** page */
        page?: string;
        /** Limit */
        limit?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTopUrlTrafficListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_TrafficList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticTrafficListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_UserRegionRequestList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticUserRegionRequestListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_UserRegionTrafficList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 用户id */
        user_id?: string;
        /** 站点id */
        site_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticUserRegionTrafficListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StatisticService_WafList: {
    parameters: {
      query: {
        /** 开始时间 */
        start_time?: string;
        /** 结束时间 */
        end_time?: string;
        /** 页码 */
        page?: string;
        /** 每页数量 */
        limit?: string;
        /** 站点id */
        site_id?: string;
        /** 操作 allow,block,bypass,challenge,js,captcha,dynamic */
        action?: string;
        /** 规则名称 */
        rule_name?: string;
        /** 国家或地区 */
        location?: string;
        /** ip地址 */
        ip?: string;
        /** 域名 */
        domain?: string;
        /** 用户id */
        user_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["statisticWafListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CollectSrv_CollectUserSummary: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /**
         * 类型(1:转码，3：截图)
         *
         *  - 1: 视频
         *  - 2: 拼接
         *  - 3: 截图
         *  - 4: 输出
         */
        type?: 0 | 1 | 2 | 3 | 4;
        /** 开始时间 */
        begin_time?: string;
        /** 结束时间 */
        end_time?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUserSummaryCollectResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ConfSrv_GetConf: {
    parameters: {
      query: {
        /** [选填]{配置类型；1:用户注册，2:基础配置，3:站内优化，4:联系方式，5:协议,6:邮箱配置,7：域名配置，8：关于我们 9:行为验证码配置} */
        type?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["confConfResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Config_GetConfig: {
    responses: {
      200: {
        schema: definitions["userConfigInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_GetDomain: {
    parameters: {
      query: {
        /** [必填]  域名id */
        id: string;
      };
    };
    responses: {
      200: {
        schema: definitions["userDomainInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_UpdateDomain: {
    parameters: {
      body: {
        body: definitions["userUpdateDomainRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateDomainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_CreateDomain: {
    parameters: {
      body: {
        body: definitions["userCreateDomainRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateDomainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_DeleteDomain: {
    parameters: {
      body: {
        body: definitions["userDeleteDomainRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteDomainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_GetAcquireDomainTxt: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetAcquireDomainTxtResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_GetDomainGroup: {
    parameters: {
      query: {
        /** [必填] 域名分组id */
        id: string;
      };
    };
    responses: {
      200: {
        schema: definitions["userDomainGroupInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_UpdateDomainGroup: {
    parameters: {
      body: {
        body: definitions["userUpdateDomainGroupRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateDomainGroupResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_CreateDomainGroup: {
    parameters: {
      body: {
        body: definitions["userCreateDomainGroupRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateDomainGroupResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_DeleteDomainGroup: {
    parameters: {
      body: {
        body: definitions["userDeleteDomainGroupRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteDomainGroupResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_AddGroupDomains: {
    parameters: {
      body: {
        body: definitions["userAddGroupDomainsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userAddGroupDomainsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_DeleteDomainGroups: {
    parameters: {
      body: {
        body: definitions["userDeleteDomainGroupsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteDomainGroupsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_UpdateDomainGroupRemark: {
    parameters: {
      body: {
        body: definitions["userUpdateDomainGroupRemarkRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateDomainGroupRemarkResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DomainGroup_ListDomainGroup: {
    parameters: {
      query: {
        /** [选填] 域名分组名称 搜索关键字 */
        name_keyword?: string;
        /** [选填] 备注 搜索关键字 */
        remark_keyword?: string;
        /** [必填] 起始条数，默认为0 */
        offset?: number;
        /** [必填] 分页条数，0-500条 0代表不限制 */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListDomainGroupResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_GetDomainNsStatus: {
    parameters: {
      query: {
        /** 域名 */
        name?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetDomainNsStatusResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_ValidDomainNs: {
    parameters: {
      body: {
        body: definitions["userValidDomainNsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userValidDomainNsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_ListDomain: {
    parameters: {
      query: {
        /** [可选] 域名分组id */
        group_id?: string;
        /** [可选] 域名 搜索关键字 */
        name_keyword?: string;
        /** [可选] 备注 搜索关键字 */
        remark_keyword?: string;
        /** [必填] 起始条数，默认为0 */
        offset?: number;
        /** [必填] 分页条数，0-500条 0代表不限制 如果传0,出于性能考虑，当前非配的NS列表就会为空 */
        limit?: number;
        /** [可选] 排序字段 "created_at","updated_at","operated_at */
        sort?: string;
        /** [可选] 排序方式 "asc","desc" */
        order?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListDomainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_CreateDomains: {
    parameters: {
      body: {
        body: definitions["userCreateDomainsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateDomainsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_BatchAcquireDomains: {
    parameters: {
      body: {
        body: definitions["userBatchAcquireDomainsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchAcquireDomainsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Domain_BatchCreateDomains: {
    parameters: {
      body: {
        body: definitions["userBatchCreateDomainsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchCreateDomainsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_GetRr: {
    parameters: {
      query: {
        /** [必填] 记录id */
        id: string;
      };
    };
    responses: {
      200: {
        schema: definitions["userRrInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_UpdateRr: {
    parameters: {
      body: {
        body: definitions["userUpdateRrRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateRrResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_CreateRr: {
    parameters: {
      body: {
        body: definitions["userCreateRrRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateRrResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_DeleteRr: {
    parameters: {
      body: {
        body: definitions["userDeleteRrRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteRrResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_ListRr: {
    parameters: {
      query: {
        /** [必传] 域名id */
        domain_id?: string;
        /** [选填] 记录类型 ["A", "AAAA", "CNAME", "MX", "NS", "TXT", "CAA"] */
        type?: string;
        /** [可选] 主机记录 搜索关键字 */
        name_keyword?: string;
        /** [可选] 记录值 搜索关键字 */
        value_keyword?: string;
        /** [必填] 起始条数，默认为0 */
        offset?: number;
        /** [必填] 分页条数，0-500条 传0代表不分页 */
        limit?: number;
        /** [可选] 排序字段 "created_at","updated_at","operated_at */
        sort?: string;
        /** [可选] 排序方式 "asc","desc" */
        order?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListRrResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_DeleteRrs: {
    parameters: {
      body: {
        body: definitions["userDeleteRrsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteRrsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_BatchUpdateRrs: {
    parameters: {
      body: {
        body: definitions["userBatchUpdateRrsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchUpdateRrsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_BatchCreateRrs: {
    parameters: {
      body: {
        body: definitions["userBatchCreateRrsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchCreateRrsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_BatchDeleteRrs: {
    parameters: {
      body: {
        body: definitions["userBatchDeleteRrsRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchDeleteRrsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_BatchCreateRrsLine: {
    parameters: {
      body: {
        body: definitions["userBatchCreateRrsLineRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchCreateRrsLineResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Rr_UpdateRrsStatus: {
    parameters: {
      body: {
        body: definitions["userUpdateRrsStatusRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateRrsStatusResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DocumentSrv_QueryDocument: {
    parameters: {
      query: {
        /** 文档类型{1:产品文档，2：常见问题} */
        document_type: number;
        /** 父类ID，如果是1级目录就传1,其他级就传该父级ID */
        parent_id?: string;
        /** 产品ID(文档类型为产品时必传) */
        product_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["documentQueryDocumentResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DocumentSrv_GetDocumentInfo: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["documentGetDocumentInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  DocumentSrv_SearchDocument: {
    parameters: {
      query: {
        /** 搜索值 */
        keywords: string;
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["documentQueryDocumentResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StorageDomain_CreateBucketDomain: {
    parameters: {
      body: {
        body: definitions["userCreateBucketDomainReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateBucketDomainResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StorageDomain_DeleteBucketDomain: {
    parameters: {
      body: {
        body: definitions["userDeleteBucketDomainReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteBucketDomainResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StorageDomain_ListUnderBucket: {
    parameters: {
      body: {
        body: definitions["userListUnderBucketReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListUnderBucketResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StorageDomain_SetDefaultDomain: {
    parameters: {
      body: {
        body: definitions["userSetDefaultDomainRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userSetDefaultDomainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StorageDomain_EditSsl: {
    parameters: {
      body: {
        body: definitions["userEditSslReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userEditSslResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  StorageDomain_ListSsl: {
    parameters: {
      body: {
        body: definitions["userListSslReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListSslResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  GuideSrv_QueryGuide: {
    parameters: {
      query: {
        /** [选填]状态{1：产品文档，2：常见问题} */
        document_type?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["guideQueryGuideResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MessageSrv_QueryMessageUser: {
    parameters: {
      query: {
        /** [选填] */
        type_id?: string;
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /** [选填]标题 */
        title?: string;
        /** [选填]内容 */
        content?: string;
        /** [选填]状态 {1：已读，2：未读} */
        status?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["messageQueryMessageResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MessageSrv_UpsertMessageUser: {
    parameters: {
      body: {
        body: definitions["messageUpsertMessageUserRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apiv1ResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MessageSrv_UpdateAllStatus: {
    parameters: {
      body: {
        body: definitions["messageUpdateAllStatusRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apiv1ResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MessageSrv_GetMessageInfo: {
    parameters: {
      query: {
        message_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["messageGetMessageInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MessageSrv_QueryMessageSummary: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["messageQueryMessageSummaryResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MessageSrv_GetMessageType: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["messageGetMessageTypeListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CollectSrv_CollectDosage: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /**
         * 类型(1:转码，3：截图)
         *
         *  - 1: 视频
         *  - 2: 拼接
         *  - 3: 截图
         *  - 4: 输出
         */
        type?: 0 | 1 | 2 | 3 | 4;
        /** 开始时间 */
        begin_time?: string;
        /** 结束时间 */
        end_time?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCollectDosageResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_QueryPreset: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /** 自定义类型（1：自定义，2：系统预设） */
        custom_type?: number;
        /** 区域ID */
        region_id?: string;
        /** 预设名 */
        name?: string;
        /**
         * - 1: 视频预设
         *  - 2: 水印预设
         *  - 3: 截图预设
         *  - 4: 拼接预设
         */
        preset_type: 0 | 1 | 2 | 3 | 4;
        /**
         * 水印类型
         *
         *  - 1: 图片水印
         *  - 2: 文字水印
         */
        watermark_type: 0 | 1 | 2;
        /**
         * 截图类型
         *
         *  - 1: 单张
         *  - 2: 多张
         */
        screenshot_type: 0 | 1 | 2;
        /**
         * 视频类型
         *
         *  - 1: Mp4
         *  - 2: Flv
         *  - 3: Hls
         */
        video_type: 0 | 1 | 2 | 3;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPresetListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_DelPreset: {
    parameters: {
      query: {
        id?: string;
        /**
         * 预设类型
         *
         *  - 1: 视频预设
         *  - 2: 水印预设
         *  - 3: 截图预设
         *  - 4: 拼接预设
         */
        preset_type: 0 | 1 | 2 | 3 | 4;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_GetFont: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userFontResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_GetPreset: {
    parameters: {
      query: {
        id?: string;
        /**
         * 预设类型
         *
         *  - 1: 视频预设
         *  - 2: 水印预设
         *  - 3: 截图预设
         *  - 4: 拼接预设
         */
        preset_type: 0 | 1 | 2 | 3 | 4;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPresetResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_GetWatermarkPreview: {
    parameters: {
      query: {
        /**
         * 水印类型,1:图片，2：文字
         *
         *  - 1: 图片水印
         *  - 2: 文字水印
         */
        type?: 0 | 1 | 2;
        /**
         * 水印位置
         *
         *  - 1: 左上
         *  - 2: 中上
         *  - 3: 右上
         *  - 4: 左中
         *  - 5: 中
         *  - 6: 右中
         *  - 7: 左下
         *  - 8: 中下
         *  - 9: 右下
         */
        location?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        /** 水印边距-横向 */
        margin_w?: number;
        /** 水印边距-纵向 */
        margin_h?: number;
        /** 预览分辨率宽 */
        preview_w?: number;
        /** 预览分辨率高 */
        preview_h?: number;
        /** 图片空间ID */
        bucket_id?: string;
        /** 图片路径 */
        image_path?: string;
        /** 图片自适应缩放,0.01-1 */
        image_adaptive?: number;
        /** 水印文字 */
        text_word?: string;
        /**
         * 水印字体
         *
         *  - 1: 方正宋体
         *  - 2: 方正黑体
         *  - 3: 方正楷体
         */
        text_font?: 0 | 1 | 2 | 3;
        /** 水印字体大小 */
        text_font_size?: number;
        /** 水印字体颜色 */
        text_font_color?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userWatermarkPreviewResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_UpdatePresetScreenshot: {
    parameters: {
      body: {
        body: definitions["userScreenshotPresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_CreatePresetScreenshot: {
    parameters: {
      body: {
        body: definitions["userScreenshotPresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_UpdatePresetSplice: {
    parameters: {
      body: {
        body: definitions["userSplicePresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_CreatePresetSplice: {
    parameters: {
      body: {
        body: definitions["userSplicePresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_UpdatePresetVideo: {
    parameters: {
      body: {
        body: definitions["userVideoPresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_CreatePresetVideo: {
    parameters: {
      body: {
        body: definitions["userVideoPresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_UpdatePresetWatermark: {
    parameters: {
      body: {
        body: definitions["userWatermarkPresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  PresetSrv_CreatePresetWatermark: {
    parameters: {
      body: {
        body: definitions["userWatermarkPresetRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  QueueSrv_QueryQueue: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /** 队列名 */
        name?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userQueryQueueResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  QueueSrv_UpdateQueue: {
    parameters: {
      body: {
        body: definitions["userUpdateQueueRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  QueueSrv_CreateQueue: {
    parameters: {
      body: {
        body: definitions["userCreateQueueRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  QueueSrv_DelQueue: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  QueueSrv_UpdateProductIndex: {
    parameters: {
      body: {
        body: definitions["userUpdateQueueIndexRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  QueueSrv_QueueInfo: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userQueueInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TaskSrv_QueryTask: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /** 区域ID */
        region_id: string;
        /** 队列ID */
        queue_id?: string;
        /** 状态， 1：调度，2:排队，3：处理，4：成功，5：失败（页面展示时，调度和排队中都显示成排队） */
        status?: number;
        /** 节点ID */
        node_id?: string;
        /** 任务名 */
        name?: string;
        /** 队列名 */
        queue_name?: string;
        /** 开始时间 */
        begin_time?: number;
        /** 结束时间 */
        end_time?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userQueryTaskResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TaskSrv_CreateTask: {
    parameters: {
      body: {
        body: definitions["userCreateTaskRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TaskSrv_GetTaskInfo: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userTaskInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TaskSrv_RetryTask: {
    parameters: {
      body: {
        body: definitions["userRetryTaskRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userTaskInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TaskSrv_CreateTaskVerify: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateTaskVerifyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TriggerSrv_QueryTrigger: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /** 状态， 1:启用，2：禁用 */
        status?: number;
        /** 队列ID */
        queue_id?: string;
        /** 任务名 */
        name?: string;
        /** 区域ID */
        region_id?: string;
        /** 开始时间 */
        begin_time?: number;
        /** 结束时间 */
        end_time?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userQueryTriggerResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TriggerSrv_CreateTrigger: {
    parameters: {
      body: {
        body: definitions["userCreateTriggerRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TriggerSrv_DelTrigger: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TriggerSrv_TriggerInfo: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userTriggerInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  TriggerSrv_UpdateTriggerStatus: {
    parameters: {
      body: {
        body: definitions["userUpdateTriggerStatusRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkflowSrv_QueryWorkflow: {
    parameters: {
      query: {
        /** [选填]表示多少条开始 {默认：0} */
        offset?: number;
        /** [选填]需要拿多少条 {默认：10} */
        limit?: number;
        /** [选填]排序方式 {asc：正序，desc：倒序} */
        order?: string;
        /** [选填]排序字段 */
        sort?: string;
        /** 状态， 1:启用，2：禁用 */
        status?: number;
        /** 队列ID */
        queue_id?: string;
        /** 任务名 */
        name?: string;
        /** 区域ID */
        region_id?: string;
        /** 开始时间 */
        begin_time?: number;
        /** 结束时间 */
        end_time?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userQueryWorkflowResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkflowSrv_UpdateWorkflow: {
    parameters: {
      body: {
        body: definitions["userUpdateWorkflowRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkflowSrv_CreateWorkflow: {
    parameters: {
      body: {
        body: definitions["userCreateWorkflowRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkflowSrv_DelWorkflow: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1mtsResponseEmpty"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkflowSrv_WorkflowInfo: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userWorkflowInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_Download: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
        /** 文件名,需包含目录如果有的话,例如dir1/a.jpg */
        key: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDownloadResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_Upload: {
    parameters: {
      body: {
        body: definitions["userUploadReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUploadResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_Remove: {
    parameters: {
      body: {
        body: definitions["userRemoveObjReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userRemoveObjResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_MkDir: {
    parameters: {
      body: {
        body: definitions["userMkDirReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userMkDirResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_List: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
        /** 文件前缀,如果在x目录下需要补充为x/key */
        prefix?: string;
        /** 下一页标记,根据上一次请求返回做传递 */
        marker?: string;
        /** 分隔方式,''或者/ */
        delimiter?: string;
        /** 起始条数 */
        limit: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListObjResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_GetMetadata: {
    parameters: {
      query: {
        /** 空间id */
        bucket_id: string;
        /** 文件名,需包含目录如果有的话,例如dir1/a.jpg */
        key: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetMetadataResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_PutMetadata: {
    parameters: {
      body: {
        body: definitions["userPutMetadataReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPutMetadataResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_CompleteMultipartUpload: {
    parameters: {
      body: {
        body: definitions["userCompleteMultipartUploadReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCompleteMultipartUploadResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_CreateMultipartUpload: {
    parameters: {
      body: {
        body: definitions["userCreateMultipartUploadReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateMultipartUploadResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_UploadPart: {
    parameters: {
      body: {
        body: definitions["userUploadPartReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUploadPartResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_UploadPartForm: {
    parameters: {
      path: {
        /** [必填] 空间id */
        bucket_id: string;
        /** [必填] 上传id */
        upload_id: string;
        /** [必填] 所属块id */
        part_number: number;
      };
      body: {
        body: {
          /**
           * 文件名
           * @example foo.jpg
           */
          key: string;
          /**
           * 分块内容
           * Format: byte
           */
          body: string;
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUploadPartResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_PreSign: {
    parameters: {
      body: {
        body: definitions["userPreSignReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userPreSignResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Object_UploadCheck: {
    parameters: {
      body: {
        body: definitions["userUploadCheckReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUploadCheckResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Overview_GetResourceOverview: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetResourceOverviewResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ProductSrv_QueryProduct: {
    parameters: {
      query: {
        /** [选填]名称 */
        name?: string;
        /** [选填] 标识 */
        symbol?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["productQueryProductResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ProductSrv_GetProductInfo: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["productGetProductInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Region_List: {
    parameters: {
      query: {
        /** 区域名称 */
        name?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListRegionResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_GetEdgeCertificateApiFile: {
    parameters: {
      path: {
        /** 证书id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetEdgeCertificateApiFileResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_CertificateStat: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1cdnclientuserCertificateStatResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_EdgeCertificateApiList: {
    parameters: {
      path: {
        /**
         * [必填]站点ID
         *
         * // [必填]证书ApiID
         *   int64 api_id = 1[(validate.rules).int64.gt = 0];
         *   // [选填]起始条数(默认为0)
         *   int64 offset = 2[(validate.rules).int64.gte = 0];
         *   // [必填]分页条数
         *   int64 limit = 3[(validate.rules).int64.gt = 0];
         *   // [必填]域名
         *   string domain = 4[(validate.rules).string.min_len = 1];
         */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userApiListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_GetEdgeCertificate: {
    parameters: {
      path: {
        /** [必填]站点id */
        site_id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1cdnclientuserCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_UploadEdgeCertificate: {
    parameters: {
      path: {
        /** [必填]站点id */
        site_id: string;
      };
      body: {
        body: {
          /** [必填]证书 */
          certificate?: string;
          /** [必填]私钥 */
          private_key?: string;
          /**
           * // [必填]证书来源(1:api, 2:自定义上传)
           *  CertificateSource source = 4[(validate.rules).enum.not_in = 0];
           *  // [选填]证书ApiID(api来源时必填)
           *  int64 api_id = 8[(validate.rules).int64.gte = 0];
           * [必填]证书id
           * Format: int64
           */
          select_id?: string;
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUploadEdgeCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_OriginCertificateList: {
    parameters: {
      path: {
        /** [必填]站点id */
        site_id: string;
      };
      query: {
        /** [选填]排序字段(created_at创建时间, expire_at到期时间, 默认为created_atc创建时间) */
        sort?: string;
        /** [选填]排序方式(默认desc倒序) */
        order?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCertificateListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_CreateOriginCertificate: {
    parameters: {
      path: {
        /** [必填]站点id */
        site_id: string;
      };
      body: {
        body: {
          /** [必填]算法(1:RSA2048 2:ECDSA) */
          algorithm?: definitions["userCertificateAlgorithm"];
          /** [必填]域名列表 */
          domain_list?: string[];
          /**
           * [必填]有效期(天)
           * Format: int64
           */
          expires_day?: string;
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateOriginCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateService_GetOriginCertificate: {
    parameters: {
      path: {
        /** [必填]站点id */
        site_id: string;
        /** [必填]证书id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCertificateFileResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_ListCertificate: {
    parameters: {
      query: {
        /** [必填]表示多少条开始 */
        offset?: string;
        /** [必填]需要拿多少条 */
        limit?: string;
        /** [选填]排序字段(支持: issued_date, expiration_time)(默认:issued_date) */
        sort?: string;
        /** [选填]排序方式(支持: desc, asc)(默认:desc) */
        order?: string;
        /** [选填]品牌(1:ZeroSSL, 2:Lets Encrypt) */
        brand?: number;
        /** [选填]是否是自有证书(1:是, 2:否) */
        is_own?: number;
        /** [选填]加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384) */
        algorithm?: number;
        /** [选填]是否自动效验(1:是, 2:否) */
        is_verify?: number;
        /** [选填]状态(1:正常, 2:已提交续期, 3:吊销中, 4:已吊销, 5:即将到期, 6:已到期) */
        status?: number;
        /** [选填]证书备注名关键字 */
        desc_keyword?: string;
        /** [选填]绑定域名关键字 */
        domain_keyword?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_DeleteCertificate: {
    parameters: {
      body: {
        body: definitions["userDeleteCertificateRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDeleteCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_BatchUpdateCertificate: {
    parameters: {
      body: {
        body: definitions["userBatchUpdateCertificateRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchUpdateCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_DownloadCertificate: {
    parameters: {
      body: {
        body: definitions["userDownloadCertificateRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDownloadCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_RevokeCertificate: {
    parameters: {
      body: {
        body: definitions["userRevokeCertificateRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userRevokeCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_GetCertificateStat: {
    parameters: {
      query: {
        /** [必填]是否是自有证书(1:是, 2:否) */
        is_own?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1sslclientuserCertificateStatResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_UploadCertificate: {
    parameters: {
      body: {
        body: definitions["userUploadCertificateRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUploadCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_GetCertificate: {
    parameters: {
      path: {
        /** [不填]id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1sslclientuserCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_GetCertificateFile: {
    parameters: {
      path: {
        /** [必填]证书id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetCertificateFileResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  CertificateSrv_UpdateCertificate: {
    parameters: {
      path: {
        /** [不填]id */
        id: string;
      };
      body: {
        body: {
          /**
           * [选填]是否自动续签(1:是, 2:否)
           * Format: int32
           */
          is_renewal?: number;
          /** [选填]证书备注名 */
          desc?: string;
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateCertificateResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ConfigSrv_GetConfig: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["v1sslclientuserGetConfigResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_ListObtain: {
    parameters: {
      query: {
        /** [选填]起始条数(默认为0) */
        offset?: string;
        /** [必填]分页条数 */
        limit?: string;
        /** [选填]排序字段(默认为created_at创建时间) */
        sort?: string;
        /** [选填]排序方式(默认desc倒序) */
        order?: string;
        /** [选填]品牌(1:ZeroSSL, 2:Lets Encrypt) */
        brand?: number;
        /** [选填]加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384) */
        algorithm?: number;
        /** [选填]是否自动效验(1:是, 2:否) */
        is_verify?: number;
        /** [选填]状态(1:已签发, 2:待DNS验证, 3:申请中, 4:申请失败, 5:已取消) */
        status?: number;
        /** [选填]证书备注名关键字 */
        desc_keyword?: string;
        /** [选填]绑定域名关键字 */
        domain_keyword?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListObtainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_ObtainCert: {
    parameters: {
      body: {
        body: definitions["userObtainCertRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userObtainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_BatchObtainCert: {
    parameters: {
      body: {
        body: definitions["userBatchObtainRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchObtainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_CancelObtain: {
    parameters: {
      body: {
        body: definitions["userCancelObtainRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCancelObtainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_DnsServiceDetect: {
    parameters: {
      query: {
        /** [必填]域名 */
        domain?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDnsServiceDetectResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_DomainListVerify: {
    parameters: {
      body: {
        body: definitions["userDomainListVerifyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDomainListVerifyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_ObtainStat: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userObtainStatResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_GetObtain: {
    parameters: {
      path: {
        /** [不填]id */
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userObtainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_UpdateObtain: {
    parameters: {
      path: {
        /** [不填]id */
        id: string;
      };
      body: {
        body: {
          /** [选填]证书备注名 */
          desc?: string;
          /** [选填]绑定域名 */
          domain?: string;
          /**
           * [选填]加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384)
           * Format: int32
           */
          algorithm?: number;
          /**
           * [必传]是否效验(1:是, 2:否), 列表里点修改备注时传2，验证里修改时传1
           * Format: int32
           */
          is_check?: number;
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userObtainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_ObtainCertPassedDNS: {
    parameters: {
      path: {
        /** [不填]id */
        id: string;
      };
      body: {
        body: { [key: string]: unknown };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userObtainCertPassedDNSResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_DnsVerify: {
    parameters: {
      path: {
        /** [不填]id */
        id: string;
      };
      body: {
        body: { [key: string]: unknown };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userDnsVerifyResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_BatchRenewCert: {
    parameters: {
      body: {
        body: definitions["userBatchRenewRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBatchRenewResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ObtainSrv_RenewCert: {
    parameters: {
      path: {
        /** [不填]证书id */
        id: string;
      };
      body: {
        body: {
          /** [必填]证书备注名 */
          desc?: string;
          /**
           * [必填]加密算法(1:RSA2048, 2:RSA4096, 3:ECC256, 4:ECC384)
           * Format: int32
           */
          algorithm?: number;
        };
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userObtainResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_SsoLogin: {
    parameters: {
      body: {
        body: definitions["userSsoLoginRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userSsoLoginResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_SsoLogout: {
    parameters: {
      body: {
        body: definitions["userSsoLogoutRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userSsoLogoutResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_SsoVerifyTicket: {
    parameters: {
      body: {
        body: definitions["userSsoVerifyTicketRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userSsoVerifyTicketResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_SsoVerifyLogin: {
    parameters: {
      body: {
        body: definitions["userSsoVerifyLoginRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userSsoVerifyLoginResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_BucketOverview: {
    parameters: {
      body: {
        body: definitions["userStaticCommonReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBucketOverviewResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_BucketUsedSummary: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userBucketUsedSummaryResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_InflowTrend: {
    parameters: {
      body: {
        body: definitions["userStaticCommonReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userInflowTrendResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_ObjReqTrend: {
    parameters: {
      body: {
        body: definitions["userStaticCommonReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userObjReqTrendResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_OutflowTrend: {
    parameters: {
      body: {
        body: definitions["userStaticCommonReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userOutflowTrendResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_Overview: {
    parameters: {
      body: {
        body: definitions["userStaticCommonReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userOverviewResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_StorageTrend: {
    parameters: {
      body: {
        body: definitions["userStaticCommonReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userStorageTrendResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Statistic_UploadTrend: {
    parameters: {
      body: {
        body: definitions["userStaticCommonReq"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUploadTrendResp"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  ConfSrv_Upload: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["confUploadResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_GetUserInfo: {
    responses: {
      /** 用户信息 */
      200: {
        schema: definitions["userUserInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_UpdateUser: {
    parameters: {
      body: {
        body: definitions["userUpdateUserRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateUserResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_ListUserLoginRecord: {
    parameters: {
      query: {
        /** 起始条数，默认为0 */
        offset?: number;
        /** 分页条数，默认为10 最多每次拿500条 */
        limit?: number;
        /** [可选] 排序字段 "login_at" */
        sort?: string;
        /** [可选] 排序方式 "asc","desc" */
        order?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListUserLoginRecordResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_UpdateUserPassword: {
    parameters: {
      body: {
        body: definitions["userUpdateUserPasswordRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUpdateUserPasswordResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_RecoverUserPassword: {
    parameters: {
      body: {
        body: definitions["userRecoverUserPasswordRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userRecoverUserPasswordResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_RegisterUser: {
    parameters: {
      body: {
        body: definitions["userRegisterUserRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userRegisterUserResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Sso_CreateUserVisitEvent: {
    parameters: {
      body: {
        body: definitions["userCreateUserVisitEventRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateUserVisitEventResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_InfoWorkerOrder: {
    parameters: {
      query: {
        /** 工单id */
        id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userInfoWorkerOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_CreateWorkerOrder: {
    parameters: {
      body: {
        body: definitions["userCreateWorkerOrderRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userCreateWorkerOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_EndWorkerOrder: {
    parameters: {
      body: {
        body: definitions["userEndWorkerOrderRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userEndWorkerOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_ListWorkerOrder: {
    parameters: {
      query: {
        /** 产品id */
        product_id?: string;
        /** 类型id */
        type_id?: string;
        /** 工单状态  1:处理中 2:已结单 */
        state?: number;
        /** 回复状态 1:待回复 2:已回复 */
        reply_status?: number;
        /** 工单标题检索 1-100个字符 */
        title?: string;
        /** 工单描述检索 最大500个字符 */
        describe?: string;
        /** 偏移量 */
        offset?: number;
        /** 偏移量 */
        limit?: number;
        /** 排序方式 */
        order?: string;
        /** 排序字段 */
        sort?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListWorkerOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_SendWorkerOrderMsg: {
    parameters: {
      body: {
        body: definitions["userSendWorkerOrderMsgRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userSendWorkerOrderMsgResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_ListWorkerOrderDetails: {
    parameters: {
      query: {
        /** 工单id */
        worker_order_id: string;
        /** 消息id */
        id?: string;
        /** limit */
        limit?: number;
        /** 和id比较方式  1:比id大 即获取最新消息 返回数据顺序按时间递增 2:比id小 即获取历史消息 返回数据顺序按时间递减 */
        compare_mode?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userListWorkerOrderDetailsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_ReadWorkerOrderMsg: {
    parameters: {
      body: {
        body: definitions["userReadWorkerOrderMsgRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userReadWorkerOrderMsgResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_UnreadWorkerOrderMsgCount: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userUnreadWorkerOrderMsgCountResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_GetWorkerOrderType: {
    parameters: {
      query: {
        /** 产品id */
        product_id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userGetWorkerOrderTypeResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  WorkerOrderService_ProductList: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["userProductListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
}

export interface external {}
